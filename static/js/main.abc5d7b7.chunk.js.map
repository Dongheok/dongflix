{"version":3,"sources":["redux/types/content.ts","redux/util/immer.ts","redux/reducers/content.ts","redux/reducers/index.ts","redux/sagas/content.ts","redux/sagas/index.ts","redux/redux.ts","components/loading-bar/styles.tsx","components/loading-bar/index.tsx","theme/theme.tsx","redux/actions/content.ts","components/section/styles.tsx","components/section/index.tsx","components/poster/styles.tsx","components/poster/index.tsx","components/poster-wrap/styles.tsx","components/poster-wrap/index.tsx","components/message/styles.tsx","components/message/index.tsx","pages/movie/index.tsx","pages/tv/index.tsx","pages/search/styles.tsx","pages/search/index.tsx","pages/detail/styles.tsx","pages/detail/index.tsx","data/index.ts","layout/header/styles.tsx","layout/header/index.tsx","layout/styles.jsx","layout/index.tsx","Routes.jsx","app.tsx","index.tsx"],"names":["MOVIE_CONTENT_REQUEST","MOVIE_CONTENT_SUCCESS","MOVIE_CONTENT_FAIL","TV_CONTENT_REQUEST","TV_CONTENT_SUCCESS","TV_CONTENT_FAIL","DETAIL_CONTENT_REQUEST","DETAIL_CONTENT_SUCCESS","DETAIL_CONTENT_FAIL","SEARCH_CONTENT_REQUEST","SEARCH_CONTENT_SUCCESS","SEARCH_CONTENT_FAIL","Immer","state","funtion","enableES5","produce","reducer","movieContentRequest","movieContentState","movieContentError","movieContentData","nowPlaying","upComing","popular","tvContentRequest","tvContentState","tvContentError","tvContentData","topRated","airingToday","detailContentRequest","detailContentState","detailContentError","detailContentData","searchContentRequest","searchContentState","searchContentError","searchContentData","movie","tv","content","action","draft","type","data","error","rootReducer","combineReducers","combinedReducer","movieContent","tvContent","detailContent","searchContent","watchMovieContent","watchTvContent","watchDetailContent","watchSearchContent","userSaga","movieContentAPI","a","axios","get","results","call","result","put","console","response","tvContentAPI","detailContentAPI","obj","id","params","append_to_response","movieSearchContentAPI","searchText","query","tvSearchContentAPI","takeLatest","all","fork","sagas","contentSaga","defaults","baseURL","headers","post","interceptors","request","use","config","temp","api_key","language","Promise","reject","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","rootSaga","Wrapper","styled","div","props","theme","bg","main","LoadingBar","LinearProgress","className","Grid","setDetailContent","Section","title","children","container","Image","bgUrl","Poster","rating","imageUrl","year","starRating","to","length","substring","style","width","PosterWrap","Message","text","Movie","dispatch","useDispatch","useSelector","useEffect","Helmet","map","x","index","item","vote_average","poster_path","original_title","release_date","Tv","original_name","first_air_date","Search","useState","currentSearchTerm","setCurrentSearchTerm","errorMessage","setErrorMessage","searchFunction","term","searchTerm","decodeURIComponent","JSON","parse","encodeURIComponent","localStorage","setItem","stringify","onChangeSearchText","useCallback","e","target","value","onSubmitSearchText","key","prevSearchTerm","getItem","log","placeholder","onChange","onKeyUp","Backdrop","Detail","history","useHistory","useParams","parseIntId","parseInt","dataType","location","pathname","split","youtubeSw","setYoutubeSw","onClickYoutube","isNaN","push","backdrop_path","src","alt","alignItems","genres","name","runtime","episode_run_time","href","homepage","rel","overview","videos","onClick","allow","icon","cover","Icon","span","iconUrl","coverUrl","Header","justifyContent","activeClassName","Layout","Routes","basename","path","exact","component","from","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.abc5d7b7.chunk.js","sourcesContent":["// 액션 type 선언\r\n// as const 를 안하면 string으로 정의 되어 리듀서 구현 오류 생김\r\nexport const SET_IS_LOADING = 'SET_IS_LOADING' as const;\r\nexport const MOVIE_CONTENT_REQUEST = 'MOVIE_CONTENT_REQUEST' as const;\r\nexport const MOVIE_CONTENT_SUCCESS = 'MOVIE_CONTENT_SUCCESS' as const;\r\nexport const MOVIE_CONTENT_FAIL = 'MOVIE_CONTENT_FAIL' as const;\r\nexport const TV_CONTENT_REQUEST = 'TV_CONTENT_REQUEST' as const;\r\nexport const TV_CONTENT_SUCCESS = 'TV_CONTENT_SUCCESS' as const;\r\nexport const TV_CONTENT_FAIL = 'TV_CONTENT_FAIL' as const;\r\nexport const DETAIL_CONTENT_REQUEST = 'DETAIL_CONTENT_REQUEST' as const;\r\nexport const DETAIL_CONTENT_SUCCESS = 'DETAIL_CONTENT_SUCCESS' as const;\r\nexport const DETAIL_CONTENT_FAIL = 'DETAIL_CONTENT_FAIL' as const;\r\nexport const SEARCH_CONTENT_REQUEST = 'SEARCH_CONTENT_REQUEST' as const;\r\nexport const SEARCH_CONTENT_SUCCESS = 'SEARCH_CONTENT_SUCCESS' as const;\r\nexport const SEARCH_CONTENT_FAIL = 'SEARCH_CONTENT_FAIL' as const;\r\n","// ie에서 immer이슈가 생길시,\r\nimport { produce, enableES5 } from 'immer';\r\n\r\nconst Immer = (state: object, funtion: any) => {\r\n    enableES5();\r\n    return produce(state, funtion);\r\n};\r\n\r\nexport default Immer;\r\n","import {\r\n    MOVIE_CONTENT_REQUEST,\r\n    MOVIE_CONTENT_SUCCESS,\r\n    MOVIE_CONTENT_FAIL,\r\n    TV_CONTENT_REQUEST,\r\n    TV_CONTENT_SUCCESS,\r\n    TV_CONTENT_FAIL,\r\n    DETAIL_CONTENT_REQUEST,\r\n    DETAIL_CONTENT_SUCCESS,\r\n    DETAIL_CONTENT_FAIL,\r\n    SEARCH_CONTENT_REQUEST,\r\n    SEARCH_CONTENT_SUCCESS,\r\n    SEARCH_CONTENT_FAIL,\r\n} from 'redux/types/content';\r\nimport { ActionType } from 'redux/actions/content';\r\nimport Immer from 'redux/util/immer';\r\n\r\n// 전역 state 값 타입정의\r\ntype ReducerType = {\r\n    movieContentRequest: boolean;\r\n    movieContentState: boolean;\r\n    movieContentError: string;\r\n    movieContentData: {\r\n        nowPlaying: any[];\r\n        upComing: any[];\r\n        popular: any[];\r\n    };\r\n    tvContentRequest: boolean;\r\n    tvContentState: boolean;\r\n    tvContentError: string;\r\n    tvContentData: {\r\n        topRated: any[];\r\n        popular: any[];\r\n        airingToday: any[];\r\n    };\r\n    detailContentRequest: boolean;\r\n    detailContentState: boolean;\r\n    detailContentError: string;\r\n    detailContentData: {\r\n        topRated: any[];\r\n        popular: any[];\r\n        airingToday: any[];\r\n    };\r\n    searchContentRequest: boolean;\r\n    searchContentState: boolean;\r\n    searchContentError: string;\r\n    searchContentData: {\r\n        movie: any[];\r\n        tv: any[];\r\n    };\r\n};\r\n\r\n// 전역 state 값 초기값 설정\r\nconst reducer: ReducerType = {\r\n    movieContentRequest: false,\r\n    movieContentState: false,\r\n    movieContentError: '',\r\n    movieContentData: {\r\n        nowPlaying: [],\r\n        upComing: [],\r\n        popular: [],\r\n    },\r\n    tvContentRequest: false,\r\n    tvContentState: false,\r\n    tvContentError: '',\r\n    tvContentData: {\r\n        topRated: [],\r\n        popular: [],\r\n        airingToday: [],\r\n    },\r\n    detailContentRequest: false,\r\n    detailContentState: false,\r\n    detailContentError: '',\r\n    detailContentData: {\r\n        topRated: [],\r\n        popular: [],\r\n        airingToday: [],\r\n    },\r\n    searchContentRequest: false,\r\n    searchContentState: false,\r\n    searchContentError: '',\r\n    searchContentData: {\r\n        movie: [],\r\n        tv: [],\r\n    },\r\n};\r\n\r\nconst content = (state: ReducerType = reducer, action: ActionType) =>\r\n    Immer(state, (draft: any) => {\r\n        switch (action.type as any) {\r\n            case MOVIE_CONTENT_REQUEST: {\r\n                draft.movieContentRequest = true;\r\n                draft.movieContentState = false;\r\n                draft.movieContentError = '';\r\n                break;\r\n            }\r\n            case MOVIE_CONTENT_SUCCESS: {\r\n                draft.movieContentRequest = false;\r\n                draft.movieContentState = true;\r\n                draft.movieContentData = action.data;\r\n                break;\r\n            }\r\n            case MOVIE_CONTENT_FAIL: {\r\n                draft.movieContentRequest = false;\r\n                draft.movieContentError = action.error;\r\n                break;\r\n            }\r\n            case TV_CONTENT_REQUEST: {\r\n                draft.tvContentRequest = true;\r\n                draft.tvContentState = false;\r\n                draft.tvContentError = '';\r\n                break;\r\n            }\r\n            case TV_CONTENT_SUCCESS: {\r\n                draft.tvContentRequest = false;\r\n                draft.tvContentState = true;\r\n                draft.tvContentData = action.data;\r\n                break;\r\n            }\r\n            case TV_CONTENT_FAIL: {\r\n                draft.tvContentRequest = false;\r\n                draft.tvContentError = action.error;\r\n                break;\r\n            }\r\n            case DETAIL_CONTENT_REQUEST: {\r\n                draft.detailContentRequest = true;\r\n                draft.detailContentState = false;\r\n                draft.detailContentError = '';\r\n                break;\r\n            }\r\n            case DETAIL_CONTENT_SUCCESS: {\r\n                draft.detailContentRequest = false;\r\n                draft.detailContentState = true;\r\n                draft.detailContentData = action.data;\r\n                break;\r\n            }\r\n            case DETAIL_CONTENT_FAIL: {\r\n                draft.detailContentRequest = false;\r\n                draft.detailContentError = action.error;\r\n                break;\r\n            }\r\n            case SEARCH_CONTENT_REQUEST: {\r\n                draft.searchContentRequest = true;\r\n                draft.searchContentState = false;\r\n                draft.searchContentError = '';\r\n                break;\r\n            }\r\n            case SEARCH_CONTENT_SUCCESS: {\r\n                draft.searchContentRequest = false;\r\n                draft.searchContentState = true;\r\n                draft.searchContentData = action.data;\r\n                break;\r\n            }\r\n            case SEARCH_CONTENT_FAIL: {\r\n                draft.searchContentRequest = false;\r\n                draft.searchContentError = action.error;\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\nexport default content;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport content from 'redux/reducers/content';\r\n\r\n// useSelector를 위해 필요\r\nexport type RootState = {\r\n    content: {\r\n        movieContentRequest: boolean;\r\n        movieContentError: '';\r\n        movieContentData: {\r\n            nowPlaying: any[];\r\n            upComing: any[];\r\n            popular: any[];\r\n        };\r\n        tvContentRequest: boolean;\r\n        tvContentError: '';\r\n        tvContentData: {\r\n            topRated: any[];\r\n            popular: any[];\r\n            airingToday: any[];\r\n        };\r\n        detailContentRequest: boolean;\r\n        detailContentError: '';\r\n        detailContentData: any;\r\n        searchContentRequest: boolean;\r\n        searchContentError: '';\r\n        searchContentData: {\r\n            movie: any[];\r\n            tv: any[];\r\n        };\r\n    };\r\n};\r\n\r\nconst rootReducer = (state: any, action: any) => {\r\n    switch (action.type) {\r\n        default: {\r\n            const combinedReducer = combineReducers({\r\n                content,\r\n            });\r\n            return combinedReducer(state, action);\r\n        }\r\n    }\r\n};\r\n\r\nexport default rootReducer;\r\n","import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\r\nimport axios, { AxiosResponse } from 'axios';\r\n\r\nimport {\r\n    MOVIE_CONTENT_REQUEST,\r\n    MOVIE_CONTENT_SUCCESS,\r\n    MOVIE_CONTENT_FAIL,\r\n    TV_CONTENT_REQUEST,\r\n    TV_CONTENT_SUCCESS,\r\n    TV_CONTENT_FAIL,\r\n    DETAIL_CONTENT_REQUEST,\r\n    DETAIL_CONTENT_SUCCESS,\r\n    DETAIL_CONTENT_FAIL,\r\n    SEARCH_CONTENT_REQUEST,\r\n    SEARCH_CONTENT_SUCCESS,\r\n    SEARCH_CONTENT_FAIL,\r\n} from 'redux/types/content';\r\n\r\nasync function movieContentAPI() {\r\n    const nowPlaying = await axios.get('movie/now_playing');\r\n    const upComing = await axios.get('movie/upcoming');\r\n    const popular = await axios.get('movie/popular');\r\n    return {\r\n        nowPlaying: nowPlaying.data.results,\r\n        upComing: upComing.data.results,\r\n        popular: popular.data.results,\r\n    };\r\n}\r\n\r\nfunction* movieContent() {\r\n    try {\r\n        //  call : 동기 실행\r\n        //  fork : 비동기 실행\r\n        const result: AxiosResponse<{ result: any[] }> = yield call(movieContentAPI);\r\n        yield put({\r\n            type: MOVIE_CONTENT_SUCCESS,\r\n            data: result,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        //  put : 특정 액션 디스패치\r\n        yield put({\r\n            type: MOVIE_CONTENT_FAIL,\r\n            error: e.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nasync function tvContentAPI() {\r\n    const topRated = await axios.get('tv/top_rated');\r\n    const popular = await axios.get('tv/popular');\r\n    const airingToday = await axios.get('tv/airing_today');\r\n    return {\r\n        topRated: topRated.data.results,\r\n        popular: popular.data.results,\r\n        airingToday: airingToday.data.results,\r\n    };\r\n}\r\n\r\nfunction* tvContent() {\r\n    try {\r\n        //  call : 동기 실행\r\n        //  fork : 비동기 실행\r\n        const result: AxiosResponse<{ result: any[] }> = yield call(tvContentAPI);\r\n        yield put({\r\n            type: TV_CONTENT_SUCCESS,\r\n            data: result,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        //  put : 특정 액션 디스패치\r\n        yield put({\r\n            type: TV_CONTENT_FAIL,\r\n            error: e.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nasync function detailContentAPI(obj: { content: string; id: number }) {\r\n    return axios.get(obj.content === 'movie' ? `movie/${obj.id}` : `tv/${obj.id}`, {\r\n        params: {\r\n            append_to_response: 'videos',\r\n        },\r\n    });\r\n}\r\n\r\nfunction* detailContent(action: any) {\r\n    try {\r\n        //  call : 동기 실행\r\n        //  fork : 비동기 실행\r\n        const result: AxiosResponse<{ data: object }> = yield call(detailContentAPI, {\r\n            content: action.content,\r\n            id: action.id,\r\n        });\r\n        yield put({\r\n            type: DETAIL_CONTENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        //  put : 특정 액션 디스패치\r\n        yield put({\r\n            type: DETAIL_CONTENT_FAIL,\r\n            error: e.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction movieSearchContentAPI(searchText: string) {\r\n    return axios.get('/search/movie', {\r\n        params: {\r\n            query: searchText,\r\n        },\r\n    });\r\n}\r\n\r\nfunction tvSearchContentAPI(searchText: string) {\r\n    return axios.get('/search/tv', {\r\n        params: {\r\n            query: searchText,\r\n        },\r\n    });\r\n}\r\n\r\nfunction* searchContent(action: any) {\r\n    try {\r\n        //  call : 동기 실행\r\n        //  fork : 비동기 실행\r\n        const movie: AxiosResponse<{ results: any[] }> = yield call(movieSearchContentAPI, action.searchText);\r\n        const tv: AxiosResponse<{ results: any[] }> = yield call(tvSearchContentAPI, action.searchText);\r\n        yield put({\r\n            type: SEARCH_CONTENT_SUCCESS,\r\n            data: {\r\n                movie: movie.data.results,\r\n                tv: tv.data.results,\r\n            },\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        //  put : 특정 액션 디스패치\r\n        yield put({\r\n            type: SEARCH_CONTENT_FAIL,\r\n            error: e.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchMovieContent() {\r\n    yield takeLatest(MOVIE_CONTENT_REQUEST, movieContent);\r\n}\r\n\r\nfunction* watchTvContent() {\r\n    yield takeLatest(TV_CONTENT_REQUEST, tvContent);\r\n}\r\n\r\nfunction* watchDetailContent() {\r\n    yield takeLatest(DETAIL_CONTENT_REQUEST, detailContent);\r\n}\r\n\r\nfunction* watchSearchContent() {\r\n    yield takeLatest(SEARCH_CONTENT_REQUEST, searchContent);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([fork(watchMovieContent), fork(watchTvContent), fork(watchDetailContent), fork(watchSearchContent)]);\r\n}\r\n","import { all, fork } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport contentSaga from './content';\r\n\r\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\r\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\r\n\r\naxios.interceptors.request.use(\r\n    (config: any) => {\r\n        // 요청 바로 직전\r\n        const temp = config;\r\n        temp.params = temp.params || {};\r\n        temp.params.api_key = '4e88b4f1dedb08e14ee3e3dbe7eeb858';\r\n        temp.params.language = 'en-US';\r\n        return temp;\r\n    },\r\n    (error: any) =>\r\n        // 요청 에러 처리를 작성합니다.\r\n        Promise.reject(error),\r\n);\r\n\r\nexport default function* sagas() {\r\n    yield all([fork(contentSaga)]);\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from 'redux/reducers';\r\nimport rootSaga from 'redux/sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n    position: fixed;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    z-index: 2500;\r\n    & .progress_bar {\r\n        position: relative;\r\n        width: 100%;\r\n        background: ${(props) => props.theme.bg};\r\n        & > div {\r\n            background: ${(props) => props.theme.main};\r\n        }\r\n    }\r\n    & .click_block {\r\n        width: 100%;\r\n        height: 100vh;\r\n    }\r\n`;\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport { Grid, LinearProgress } from '@material-ui/core';\r\nimport Wrapper from './styles';\r\n\r\nconst LoadingBar: React.FC = () => (\r\n    <Wrapper>\r\n        <LinearProgress className=\"progress_bar\" />\r\n        <Grid className=\"click_block\" />\r\n    </Wrapper>\r\n);\r\n\r\nexport default LoadingBar;\r\n","import { DefaultTheme } from 'styled-components';\r\n\r\nexport const theme: DefaultTheme = {\r\n    main: `#27ae60`,\r\n    bg: `rgba(20,20,20,1)`,\r\n};\r\n","import { MOVIE_CONTENT_REQUEST, TV_CONTENT_REQUEST, DETAIL_CONTENT_REQUEST, SEARCH_CONTENT_REQUEST } from 'redux/types/content';\r\n\r\nexport const setMovieContent = () => ({\r\n    type: MOVIE_CONTENT_REQUEST,\r\n    data: {},\r\n    error: '',\r\n});\r\n\r\nexport const setTvContent = () => ({\r\n    type: TV_CONTENT_REQUEST,\r\n    data: {},\r\n    error: '',\r\n});\r\n\r\ntype DetailDataType = {\r\n    content: string;\r\n    id: number;\r\n};\r\n\r\nexport const setDetailContent = (obj: DetailDataType) => ({\r\n    type: DETAIL_CONTENT_REQUEST,\r\n    content: obj.content,\r\n    id: obj.id,\r\n    data: {},\r\n    error: '',\r\n});\r\n\r\nexport const searchContent = (searchText: string) => ({\r\n    type: SEARCH_CONTENT_REQUEST,\r\n    searchText,\r\n    data: {},\r\n    error: '',\r\n});\r\n\r\n// 액션 객체들을 위한 타입 정의\r\nexport type ActionType = ReturnType<typeof setMovieContent> | ReturnType<typeof setMovieContent> | ReturnType<typeof setDetailContent> | ReturnType<typeof searchContent>;\r\n","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n    & > h2 {\r\n        color: #fff;\r\n        font-weight: bold;\r\n        font-size: 14px;\r\n    }\r\n    & > span {\r\n        color: #fff;\r\n        font-size: 14px;\r\n    }\r\n`;\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport Wrapper from './styles';\r\n\r\ntype SectionType = {\r\n    title: string;\r\n    children?: React.ReactNode;\r\n};\r\n\r\nconst Section: React.FC<SectionType> = ({ title, children }) => (\r\n    <Wrapper>\r\n        <h2>{title}</h2>\r\n        <Grid container>{children}</Grid>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;\r\n","import styled from 'styled-components';\r\n\r\ntype ImageType = {\r\n    bgUrl: string;\r\n};\r\n\r\nexport const Image = styled.div<ImageType>`\r\n    background: url(${(props) => `${props.bgUrl}`}) center center;\r\n    background-size: cover;\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    cursor: pointer;\r\n    * {\r\n        transition: all 0.4s;\r\n    }\r\n    & .image_wrap {\r\n        margin-bottom: 5px;\r\n    }\r\n    & .image {\r\n        position: relative;\r\n        height: 250px;\r\n        border-radius: 4px;\r\n        transition: all 0.4s ease;\r\n        & .text_box {\r\n            position: absolute;\r\n            left: 0;\r\n            top: 50px;\r\n            z-index: 2000;\r\n            width: 100%;\r\n            opacity: 0;\r\n            text-align: center;\r\n            transition: all 0.4s ease;\r\n            & .title {\r\n                margin-bottom: 3px;\r\n                color: #000;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                text-shadow: 2px 2px rgba(0, 0, 0, 0.09);\r\n            }\r\n            & .year {\r\n                padding-top: 15px;\r\n                color: #000;\r\n                font-size: 14px;\r\n                color: #000;\r\n                font-weight: bold;\r\n                text-shadow: 2px 2px rgba(0, 0, 0, 0.09);\r\n            }\r\n        }\r\n        & .rating {\r\n            position: absolute;\r\n            left: 0;\r\n            bottom: 10px;\r\n            width: 100%;\r\n            opacity: 0;\r\n            padding: 0 8px;\r\n            & .star {\r\n                position: relative;\r\n                display: block;\r\n                width: 100px;\r\n                height: 24px;\r\n                margin: 0 auto;\r\n                background: url('/dongflix/images/star.png') no-repeat;\r\n            }\r\n            & .star_cover {\r\n                position: absolute;\r\n                left: 0px;\r\n                top: 0;\r\n                display: block;\r\n                width: 0;\r\n                height: 24px;\r\n                background: url('/dongflix/images/star_cover.png') no-repeat;\r\n            }\r\n        }\r\n        &::before {\r\n            content: '';\r\n            position: absolute;\r\n            left: 0;\r\n            top: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: rgba(255, 255, 255, 0.7);\r\n            opacity: 0;\r\n            transition: all 0.4s ease;\r\n            border-radius: 4px;\r\n        }\r\n        &:hover .text_box {\r\n            opacity: 1;\r\n        }\r\n        &:hover .rating {\r\n            opacity: 1;\r\n        }\r\n        &:hover::before {\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport { Wrapper, Image } from './styles';\r\n\r\ntype PosterType = {\r\n    id: number;\r\n    imageUrl: string;\r\n    title: string;\r\n    rating: number;\r\n    year: string;\r\n    type: string;\r\n};\r\n\r\nconst Poster: React.FC<PosterType> = ({ type, rating, id, imageUrl, title, year }) => {\r\n    const starRating = rating * 10;\r\n    return (\r\n        <Link to={type === 'movie' ? `/movie/detail/${id}` : `/tv/detail/${id}`}>\r\n            <Wrapper>\r\n                <Grid className=\"image_wrap\">\r\n                    <Image bgUrl={imageUrl ? `https://image.tmdb.org/t/p/w200${imageUrl}` : '/dongflix/images/notVideo.jpg'} className=\"image\">\r\n                        <Grid className=\"text_box\">\r\n                            <h2 className=\"title\">{title.length > 15 ? `${title.substring(0, 15)}...` : title}</h2>\r\n                            <p className=\"year\">{year}</p>\r\n                        </Grid>\r\n                        <span className=\"rating\">\r\n                            <span className=\"star\">\r\n                                <span className=\"star_cover\" style={{ width: `${starRating}%` }} />\r\n                            </span>\r\n                        </span>\r\n                    </Image>\r\n                </Grid>\r\n            </Wrapper>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default Poster;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    * {\r\n        transition: all 0.4s;\r\n    }\r\n    & .poster_wrap {\r\n        padding: 40px 0px;\r\n        & .poster {\r\n            width: calc(100% / 12);\r\n            padding: 4px;\r\n        }\r\n        & > div {\r\n            padding-bottom: 40px;\r\n            & > h2 {\r\n                padding-bottom: 40px;\r\n                text-indent: 4px;\r\n                color: #fff;\r\n            }\r\n            & > span {\r\n                display: inline-block;\r\n                width: 20%;\r\n            }\r\n        }\r\n    }\r\n    @media (max-width: 1756px) {\r\n        & .poster_wrap {\r\n            & .poster {\r\n                width: calc(100% / 11);\r\n            }\r\n        }\r\n    }\r\n    @media (max-width: 1610px) {\r\n        & .poster_wrap {\r\n            & .poster {\r\n                width: calc(100% / 10);\r\n            }\r\n        }\r\n    }\r\n    @media (max-width: 1462px) {\r\n        & .poster_wrap {\r\n            & .poster {\r\n                width: calc(100% / 9);\r\n            }\r\n        }\r\n    }\r\n    @media (max-width: 1315px) {\r\n        & .poster_wrap {\r\n            & .poster {\r\n                width: calc(100% / 8);\r\n            }\r\n        }\r\n    }\r\n    @media (max-width: 1170px) {\r\n        & .poster_wrap {\r\n            & .poster {\r\n                width: calc(100% / 7);\r\n            }\r\n        }\r\n    }\r\n    @media (max-width: 1025px) {\r\n        & .poster_wrap {\r\n            & .poster {\r\n                width: calc(100% / 6);\r\n            }\r\n        }\r\n    }\r\n    @media (max-width: 876px) {\r\n        & .poster_wrap {\r\n            & .poster {\r\n                width: calc(100% / 5);\r\n            }\r\n        }\r\n    }\r\n    @media (max-width: 730px) {\r\n        & .poster_wrap {\r\n            & .poster {\r\n                width: calc(100% / 4);\r\n            }\r\n        }\r\n    }\r\n    @media (max-width: 584px) {\r\n        & .poster_wrap {\r\n            & .poster {\r\n                width: calc(100% / 3);\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport { Wrapper } from './styles';\r\n\r\ntype PosterWrapType = {\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst PosterWrap: React.FC<PosterWrapType> = ({ children }) => (\r\n    <Wrapper>\r\n        <Grid className=\"poster_wrap\">{children}</Grid>\r\n    </Wrapper>\r\n);\r\n\r\nexport default PosterWrap;\r\n","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n    padding: 64px 24px;\r\n    width: 100vw;\r\n    & h2 {\r\n        width: 100%;\r\n        text-align: center;\r\n        color: #e74c3c;\r\n        font-weight: bold;\r\n    }\r\n`;\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport Wrapper from './styles';\r\n\r\ntype MessageType = {\r\n    text: string;\r\n};\r\n\r\nconst Message: React.FC<MessageType> = ({ text }) => (\r\n    <Wrapper>\r\n        <h2>{text}</h2>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Message;\r\n","import React, { useEffect } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setMovieContent } from 'redux/actions/content';\r\nimport { RootState } from 'redux/reducers';\r\n\r\nimport { Grid } from '@material-ui/core';\r\nimport Section from 'components/section';\r\nimport Poster from 'components/poster';\r\nimport PosterWrap from 'components/poster-wrap';\r\nimport Message from 'components/message';\r\n\r\nconst Movie: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const { movieContentData, movieContentError } = useSelector((state: RootState) => state.content);\r\n\r\n    useEffect(() => {\r\n        dispatch(setMovieContent());\r\n    }, []);\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Movies | Dongflix</title>\r\n            </Helmet>\r\n            <PosterWrap>\r\n                {movieContentData.nowPlaying && movieContentData.nowPlaying.length > 0 && (\r\n                    <Section title=\"Now Playing\">\r\n                        {movieContentData.nowPlaying.map((x, index) => (\r\n                            <Grid item className=\"poster\" key={x.id}>\r\n                                <Poster type=\"movie\" rating={x.vote_average} id={x.id} imageUrl={x.poster_path} title={x.original_title} year={x.release_date.substring(0, 4)} />\r\n                            </Grid>\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {/*  */}\r\n                {movieContentData.upComing && movieContentData.upComing.length > 0 && (\r\n                    <Section title=\"UpComing Movies\">\r\n                        {movieContentData.upComing.map((x, index) => (\r\n                            <Grid item className=\"poster\" key={x.id}>\r\n                                <Poster type=\"movie\" rating={x.vote_average} id={x.id} imageUrl={x.poster_path} title={x.original_title} year={x.release_date.substring(0, 4)} />\r\n                            </Grid>\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {/*  */}\r\n                {movieContentData.popular && movieContentData.popular.length > 0 && (\r\n                    <Section title=\"Popular Movies\">\r\n                        {movieContentData.popular.map((x, index) => (\r\n                            <Grid item className=\"poster\" key={x.id}>\r\n                                <Poster type=\"movie\" rating={x.vote_average} id={x.id} imageUrl={x.poster_path} title={x.original_title} year={x && x.release_date && x.release_date.substring(0, 4)} />\r\n                            </Grid>\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {/*  */}\r\n                {movieContentError && <Message text={movieContentError} />}\r\n            </PosterWrap>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Movie;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport Helmet from 'react-helmet';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setTvContent } from 'redux/actions/content';\r\nimport { RootState } from 'redux/reducers';\r\n\r\nimport Section from 'components/section';\r\nimport Poster from 'components/poster';\r\nimport PosterWrap from 'components/poster-wrap';\r\nimport Message from 'components/message';\r\n\r\nconst Tv: React.FC = () => {\r\n    const { tvContentData, tvContentError } = useSelector((state: RootState) => state.content);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(setTvContent());\r\n    }, []);\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Tv | Dongflix</title>\r\n            </Helmet>\r\n            <PosterWrap>\r\n                {/*  */}\r\n                {tvContentData.topRated && tvContentData.topRated.length > 0 && (\r\n                    <Section title=\"Top Rated\">\r\n                        {tvContentData.topRated.map((x, index) => (\r\n                            <Grid item className=\"poster\" key={x.id}>\r\n                                <Poster id={x.id} title={x.original_name} imageUrl={x.poster_path} rating={x.vote_average} year={x.first_air_date.substring(0, 4)} type=\"tv\" />\r\n                            </Grid>\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {/*  */}\r\n                {tvContentData.popular && tvContentData.popular.length > 0 && (\r\n                    <Section title=\"Popular TV\">\r\n                        {tvContentData.popular.map((x, index) => (\r\n                            <Grid item className=\"poster\" key={x.id}>\r\n                                <Poster id={x.id} title={x.original_name} imageUrl={x.poster_path} rating={x.vote_average} year={x.first_air_date.substring(0, 4)} type=\"tv\" />\r\n                            </Grid>\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {/*  */}\r\n                {tvContentData.airingToday && tvContentData.airingToday.length > 0 && (\r\n                    <Section title=\"Airing Today TV\">\r\n                        {tvContentData.airingToday.map((x, index) => (\r\n                            <Grid item className=\"poster\" key={x.id}>\r\n                                <Poster id={x.id} title={x.original_name} imageUrl={x.poster_path} rating={x.vote_average} year={x.first_air_date.substring(0, 4)} type=\"tv\" />\r\n                            </Grid>\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {/*  */}\r\n                {tvContentError && <Message text={tvContentError} />}\r\n            </PosterWrap>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Tv;\r\n","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n    padding: 40px 0px;\r\n    & .search_form {\r\n        width: 100%;\r\n        & input {\r\n            width: 100%;\r\n            padding: 0 8px;\r\n            font-size: 28px;\r\n            color: rgba(255, 255, 255, 1);\r\n            background: none;\r\n            border: none;\r\n            outline: none;\r\n            &::placeholder {\r\n                color: rgba(255, 255, 255, 0.6);\r\n            }\r\n        }\r\n    }\r\n`;\r\nexport default Wrapper;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from 'redux/reducers';\r\nimport { searchContent } from 'redux/actions/content';\r\n\r\nimport { Grid } from '@material-ui/core';\r\nimport Section from 'components/section';\r\nimport Poster from 'components/poster';\r\nimport PosterWrap from 'components/poster-wrap';\r\nimport Message from 'components/message';\r\nimport Wrapper from './styles';\r\n\r\nconst Search: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const { searchContentData } = useSelector((state: RootState) => state.content);\r\n\r\n    const [currentSearchTerm, setCurrentSearchTerm] = useState<string>('');\r\n    const [errorMessage, setErrorMessage] = useState<string>('');\r\n    const searchFunction = async (term: string) => {\r\n        let searchTerm: string | undefined = '';\r\n        // 새로고침 시, 전에 검색한 기록이 있으면 반영\r\n        if (term !== '') {\r\n            searchTerm = term;\r\n            // 화면에 표시하는 데이터는 디코딩 문자열\r\n            setCurrentSearchTerm(decodeURIComponent(JSON.parse(searchTerm)));\r\n            setErrorMessage(decodeURIComponent(JSON.parse(searchTerm)));\r\n        } else {\r\n            // 통신하는 데이터는 인코딩 문자열\r\n            searchTerm = encodeURIComponent(currentSearchTerm);\r\n            // 로컬 저장소에 json형태로 set\r\n            localStorage.setItem('searchTerm', JSON.stringify(searchTerm));\r\n            setErrorMessage(decodeURIComponent(JSON.parse(JSON.stringify(searchTerm))));\r\n        }\r\n        dispatch(searchContent(searchTerm));\r\n    };\r\n\r\n    const onChangeSearchText = useCallback(\r\n        (e) => {\r\n            setCurrentSearchTerm(e.target.value);\r\n        },\r\n        [currentSearchTerm],\r\n    );\r\n\r\n    const onSubmitSearchText = useCallback(\r\n        (e) => {\r\n            if (e.key === 'Enter') {\r\n                searchFunction('');\r\n            }\r\n        },\r\n        [currentSearchTerm],\r\n    );\r\n\r\n    useEffect(() => {\r\n        const prevSearchTerm = localStorage.getItem('searchTerm');\r\n        // 만약, 전에 검색했던 검색어가 없거나 빈게 아니면 히스토리를 가져와라\r\n        if (prevSearchTerm && prevSearchTerm !== `\"\"`) {\r\n            searchFunction(prevSearchTerm);\r\n        }\r\n        console.log(errorMessage);\r\n    }, []);\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Helmet>\r\n                <title>Search | Dongflix</title>\r\n            </Helmet>\r\n            {/*  */}\r\n            <Grid className=\"search_form\">\r\n                <input type=\"text\" value={currentSearchTerm} placeholder=\"Search Movies or TV Shows...\" onChange={onChangeSearchText} onKeyUp={onSubmitSearchText} />\r\n            </Grid>\r\n            {/*  */}\r\n            <PosterWrap>\r\n                {searchContentData.movie && searchContentData.movie.length > 0 && (\r\n                    <Section title=\"Movie Results\">\r\n                        {searchContentData.movie.map((x, index) => (\r\n                            <Grid item className=\"poster\" key={x.id}>\r\n                                <Poster\r\n                                    id={x.id}\r\n                                    title={x.original_title}\r\n                                    imageUrl={x.poster_path}\r\n                                    rating={x.vote_average}\r\n                                    year={x && x.release_date && x.release_date.substring(0, 4) && x.release_date.substring(0, 4)}\r\n                                    type=\"movie\"\r\n                                />\r\n                            </Grid>\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {/*  */}\r\n                {searchContentData.tv && searchContentData.tv.length > 0 && (\r\n                    <Section title=\"TV Results\">\r\n                        {searchContentData.tv.map((x, index) => (\r\n                            <Grid item className=\"poster\" key={x.id}>\r\n                                <Poster\r\n                                    id={x.id}\r\n                                    title={x.original_name}\r\n                                    imageUrl={x.poster_path}\r\n                                    rating={x.vote_average}\r\n                                    year={x && x.first_air_date && x.first_air_date.substring(0, 4) ? x.first_air_date.substring(0, 4) : 'Not Found'}\r\n                                    type=\"tv\"\r\n                                />\r\n                            </Grid>\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {/*  */}\r\n                {searchContentData.movie && searchContentData.tv && searchContentData.movie.length === 0 && searchContentData.tv.length === 0 && errorMessage !== '' && (\r\n                    <Message text={`Not Found \"${errorMessage}\"`} />\r\n                )}\r\n                {/*  */}\r\n            </PosterWrap>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Search;\r\n","import styled from 'styled-components';\r\n\r\ntype BackdropType = {\r\n    bgUrl: string;\r\n};\r\n\r\nexport const Backdrop = styled.div<BackdropType>`\r\n    width: 100%;\r\n    height: 100%;\r\n    filter: blur(3px);\r\n    opacity: 0.5;\r\n    background: url(${(props) => `${props.bgUrl}`}) center center;\r\n    background-size: cover;\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    position: fixed;\r\n    left: 0;\r\n    bottom: 0;\r\n    z-index: 1500;\r\n    width: 100%;\r\n    height: calc(100vh - 61px);\r\n    & .detail {\r\n        position: fixed;\r\n        left: 0;\r\n        top: 59px;\r\n        width: 100%;\r\n        height: 100%;\r\n        & .poster {\r\n            position: absolute;\r\n            left: 0;\r\n            top: 0;\r\n            z-index: 1;\r\n            max-width: 600px;\r\n            width: 100%;\r\n            height: 100%;\r\n            object-fit: cover;\r\n            -webkit-mask-image: -webkit-gradient(linear, right top, left top, color-stop(1, rgba(0, 0, 0, 1)), color-stop(0.5, rgba(0, 0, 0, 1)), color-stop(0, rgba(0, 0, 0, 0)));\r\n        }\r\n        & .text {\r\n            position: absolute;\r\n            left: 36%;\r\n            top: 0;\r\n            height: 100%;\r\n            z-index: 2000;\r\n            width: calc(67% - 40px);\r\n            & > div {\r\n                height: 100%;\r\n                & > div {\r\n                    & h2 {\r\n                        line-height: 48px;\r\n                        font-size: 32px;\r\n                        font-weight: bold;\r\n                        color: #fff;\r\n                        text-shadow: 2px 2px 2px rgba(0, 0, 0, 1);\r\n                    }\r\n                    & h3 {\r\n                        padding: 8px 0 32px;\r\n                        & > span {\r\n                            display: inline-block;\r\n                            margin-right: 24px;\r\n                            color: #fff;\r\n                            text-shadow: 2px 2px 2px rgba(0, 0, 0, 1);\r\n                            &.genres {\r\n                                & em {\r\n                                    display: inline-block;\r\n                                    margin-right: 4px;\r\n                                    &.last {\r\n                                        margin-right: 0;\r\n                                    }\r\n                                }\r\n                            }\r\n                            &:last-child {\r\n                                margin-right: 0;\r\n                            }\r\n                            &.rating {\r\n                                & .star {\r\n                                    position: relative;\r\n                                    display: block;\r\n                                    width: 80px;\r\n                                    height: 16px;\r\n                                    margin: 0 auto;\r\n                                    background: url('/dongflix/images/star.png') no-repeat left bottom;\r\n                                    background-size: 80px;\r\n                                }\r\n                                & .star_cover {\r\n                                    position: absolute;\r\n                                    left: 0px;\r\n                                    top: 0;\r\n                                    display: block;\r\n                                    width: 0;\r\n                                    height: 16px;\r\n                                    background: url('/dongflix/images/star_cover_w.png') no-repeat left bottom;\r\n                                    background-size: 80px;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    & .review {\r\n                        display: block;\r\n                        width: 150px;\r\n                        height: 40px;\r\n                        line-height: 36px;\r\n                        color: #fff;\r\n                        font-size: 12px;\r\n                        text-align: center;\r\n                        text-shadow: 2px 2px 2px rgba(0, 0, 0, 1);\r\n                        border: 2px solid #fff;\r\n                        border-radius: 4px;\r\n                        background: rgba(255, 255, 255, 0.3);\r\n                        cursor: pointer;\r\n                        &:hover {\r\n                            background: rgba(255, 255, 255, 0.5);\r\n                        }\r\n                    }\r\n                    & p {\r\n                        width: 635px;\r\n                        line-height: 24px;\r\n                        margin-top: 24px;\r\n                        color: rgba(255, 255, 255, 0.8);\r\n                        text-shadow: 2px 2px 2px rgba(0, 0, 0, 1);\r\n                    }\r\n                    & .youtube {\r\n                        margin-top: 24px;\r\n                        & .btn_youtube {\r\n                            width: 32px;\r\n                            height: 23px;\r\n                            background: url('/dongflix/images/icon/youtube_icon.png') no-repeat;\r\n                            background-size: 32px;\r\n                            border: none;\r\n                            outline: none;\r\n                            cursor: pointer;\r\n                        }\r\n                        & .iframe_wrap {\r\n                            width: 100%;\r\n                            margin-top: 32px;\r\n                            & iframe {\r\n                                width: 100%;\r\n                                height: 100%;\r\n                                max-height: 0px;\r\n                                opacity: 0;\r\n                            }\r\n                        }\r\n                        &.on {\r\n                            & .iframe_wrap {\r\n                                height: 320px;\r\n                                & iframe {\r\n                                    max-height: 320px;\r\n                                    opacity: 1;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    @media (max-width: 600px) {\r\n        & .detail {\r\n            & .poster {\r\n                -webkit-mask-image: none !important;\r\n            }\r\n            & .text {\r\n                left: 0;\r\n                width: 100%;\r\n                padding: 0 16px;\r\n                text-align: center;\r\n                & > div {\r\n                    & > div {\r\n                        width: 100%;\r\n                        & .review {\r\n                            margin: 0 auto;\r\n                        }\r\n                        & > p {\r\n                            width: 100%;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport Helmet from 'react-helmet';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from 'redux/reducers';\r\nimport { setDetailContent } from 'redux/actions/content';\r\n\r\nimport { Grid } from '@material-ui/core';\r\nimport Message from 'components/message';\r\nimport { Backdrop, Wrapper } from './styles';\r\n\r\nconst Detail = () => {\r\n    const { detailContentData, detailContentError } = useSelector((state: RootState) => state.content);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { id } = useParams<any>();\r\n\r\n    const parseIntId = parseInt(id, 10);\r\n\r\n    const dataType = history.location.pathname.split('/')[1];\r\n\r\n    const [youtubeSw, setYoutubeSw] = useState<boolean>(false);\r\n\r\n    const onClickYoutube = useCallback(() => {\r\n        setYoutubeSw(!youtubeSw);\r\n    }, [youtubeSw]);\r\n\r\n    useEffect(() => {\r\n        // id 없을 때 메인페이지로 유도\r\n        if (isNaN(parseIntId)) {\r\n            history.push('/');\r\n        } else if (dataType === 'movie') {\r\n            dispatch(\r\n                setDetailContent({\r\n                    content: 'movie',\r\n                    id: parseIntId,\r\n                }),\r\n            );\r\n        } else {\r\n            dispatch(\r\n                setDetailContent({\r\n                    content: 'tv',\r\n                    id: parseIntId,\r\n                }),\r\n            );\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Detail | Dongflix</title>\r\n            </Helmet>\r\n            {/*  */}\r\n            {detailContentError !== '' ? (\r\n                <Message text={detailContentError} />\r\n            ) : (\r\n                <Wrapper>\r\n                    <Backdrop bgUrl={detailContentData.backdrop_path ? `https://image.tmdb.org/t/p/original${detailContentData.backdrop_path}` : '/dongflix/images/notVideo.jpg'} />\r\n                    <Grid container className=\"detail\">\r\n                        <img\r\n                            src={detailContentData.poster_path ? `https://image.tmdb.org/t/p/original${detailContentData.poster_path}` : '/dongflix/images/notVideo.jpg'}\r\n                            alt=\"poster\"\r\n                            className=\"poster\"\r\n                        />\r\n                        <Grid className=\"text\">\r\n                            <Grid container alignItems=\"center\">\r\n                                <Grid item>\r\n                                    <h2>\r\n                                        {detailContentData.original_title}\r\n                                        {detailContentData.original_name}\r\n                                    </h2>\r\n                                    <h3>\r\n                                        {detailContentData?.genres && detailContentData?.genres.length > 0 ? (\r\n                                            <>\r\n                                                <span className=\"genres\">\r\n                                                    {detailContentData.genres.map((x: any, index: number): any => (\r\n                                                        <em key={x.name} className={index + 1 === detailContentData.genres.length ? 'last' : ''}>\r\n                                                            {x.name}\r\n                                                            &nbsp;\r\n                                                            {index + 1 !== detailContentData.genres.length && '/'}\r\n                                                        </em>\r\n                                                    ))}\r\n                                                </span>\r\n                                            </>\r\n                                        ) : (\r\n                                            'Not Found'\r\n                                        )}\r\n\r\n                                        <span>\r\n                                            {detailContentData.release_date?.substring(0, 4)}\r\n                                            {detailContentData.first_air_date?.substring(0, 4)}\r\n                                        </span>\r\n                                        <span>\r\n                                            {detailContentData?.runtime}\r\n                                            {detailContentData?.episode_run_time}\r\n                                            &nbsp;min\r\n                                        </span>\r\n                                        <span className=\"rating\">\r\n                                            {detailContentData?.vote_average && (\r\n                                                <span className=\"star\">\r\n                                                    <span\r\n                                                        className=\"star_cover\"\r\n                                                        style={{\r\n                                                            width: `${detailContentData?.vote_average * 10}%`,\r\n                                                        }}\r\n                                                    />\r\n                                                </span>\r\n                                            )}\r\n                                        </span>\r\n                                    </h3>\r\n                                    <a href={detailContentData?.homepage ? `${detailContentData.homepage}` : '/'} target=\"_blank\" rel=\"noopener noreferrer\" className=\"review\">\r\n                                        READ REVIEW\r\n                                    </a>\r\n                                    <p>{detailContentData?.overview}</p>\r\n                                    {detailContentData.videos?.results[0]?.key && (\r\n                                        <Grid className={`youtube ${youtubeSw && 'on'}`}>\r\n                                            <Grid className=\"btn_youtube\" onClick={onClickYoutube} />\r\n                                            <Grid className=\"iframe_wrap\">\r\n                                                <iframe\r\n                                                    title=\"youtube\"\r\n                                                    src={detailContentData.videos.results[0].key && `https://www.youtube.com/embed/${detailContentData.videos.results[0].key}`}\r\n                                                    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    )}\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Wrapper>\r\n            )}\r\n            {/*  */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Detail;\r\n","export const data = [\r\n    {\r\n        key: '/movie',\r\n        value: 'Movie',\r\n        icon: '/dongflix/images/icon/movie_icon.png',\r\n        cover: '/dongflix/images/icon/movie_icon_c.png',\r\n    },\r\n    {\r\n        key: '/tv',\r\n        value: 'TV',\r\n        icon: '/dongflix/images/icon/tv_icon.png',\r\n        cover: '/dongflix/images/icon/tv_icon_c.png',\r\n    },\r\n    {\r\n        key: '/search',\r\n        value: 'Search',\r\n        icon: '/dongflix/images/icon/search_icon.png',\r\n        cover: '/dongflix/images/icon/search_icon_c.png',\r\n    },\r\n];\r\n","import styled from 'styled-components';\r\n\r\ntype IconType = {\r\n    iconUrl: string;\r\n    coverUrl: string;\r\n};\r\n\r\nexport const Icon = styled.span<IconType>`\r\n    display: inline-block;\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n    width: 24px;\r\n    height: 24px;\r\n    background: url(${(props) => `${props.iconUrl}`});\r\n    background-size: 24px;\r\n    &::before {\r\n        content: '';\r\n        position: absolute;\r\n        left: 0;\r\n        top: 0;\r\n        width: 0px;\r\n        height: 24px;\r\n        background: url(${(props) => `${props.coverUrl}`});\r\n        background-size: 24px;\r\n        transition: all 0.4s;\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    position: fixed;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    z-index: 2000;\r\n    background: rgba(20, 20, 20, 1);\r\n    & > .header_wrap {\r\n        & > div {\r\n            & a {\r\n                position: relative;\r\n                display: inline-block;\r\n                width: 80px;\r\n                height: 60px;\r\n                color: #fff;\r\n                text-align: center;\r\n                &.on .icon::before {\r\n                    width: 24px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { data } from 'data';\r\nimport { Wrapper, Icon } from './styles';\r\n\r\nconst Header: React.FC = () => (\r\n    <Wrapper>\r\n        <Grid container justifyContent=\"space-between\" className=\"header_wrap\">\r\n            <Grid item>\r\n                {data.map(\r\n                    (x, index) =>\r\n                        index !== 2 && (\r\n                            <NavLink key={x.key} to={x.key} activeClassName=\"on\">\r\n                                <Icon iconUrl={x.icon} coverUrl={x.cover} className=\"icon\" />\r\n                            </NavLink>\r\n                        ),\r\n                )}\r\n            </Grid>\r\n            <Grid item>\r\n                {data.map(\r\n                    (x, index) =>\r\n                        index === 2 && (\r\n                            <NavLink key={x.key} to={x.key} activeClassName=\"on\">\r\n                                <Icon iconUrl={x.icon} coverUrl={x.cover} className=\"icon\" />\r\n                            </NavLink>\r\n                        ),\r\n                )}\r\n            </Grid>\r\n        </Grid>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Header;\r\n","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n    & .content {\r\n        padding-top: 60px;\r\n    }\r\n`;\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport Header from './header';\r\nimport Wrapper from './styles';\r\n\r\ntype LayoutType = {\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst Layout: React.FC<LayoutType> = ({ children }) => (\r\n    <Wrapper>\r\n        <Header />\r\n        <Grid className=\"content\">{children}</Grid>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Layout;\r\n","import { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\r\n\r\n// pages\r\nimport Movie from 'pages/movie';\r\nimport Tv from 'pages/tv';\r\nimport Search from 'pages/search';\r\nimport Detail from 'pages/detail';\r\nimport Layout from './layout';\r\n\r\nconst Routes = () => (\r\n    <BrowserRouter basename=\"/dongflix\">\r\n        <Layout>\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Movie} />\r\n                <Route path=\"/movie\" exact component={Movie} />\r\n                <Route path=\"/tv\" exact component={Tv} />\r\n                <Route path=\"/search\" component={Search} />\r\n                <Route path=\"/movie/detail/:id\" component={Detail} />\r\n                <Route path=\"/tv/detail/:id\" component={Detail} />\r\n\r\n                <Redirect from=\"*\" to=\"/\" />\r\n            </Switch>\r\n        </Layout>\r\n    </BrowserRouter>\r\n);\r\nexport default Routes;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from 'redux/reducers';\r\n\r\nimport LoadingBar from 'components/loading-bar';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { theme } from 'theme/theme';\r\nimport Routes from './Routes';\r\n\r\nconst App: React.FC = () => {\r\n    const { movieContentRequest, tvContentRequest } = useSelector((state: RootState) => state.content);\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            {(movieContentRequest || tvContentRequest) && <LoadingBar />}\r\n            <Routes />\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// IE11 보기 위함\r\nimport 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from 'redux/redux';\r\n\r\n// css\r\nimport './css/reset.css';\r\nimport './css/global.css';\r\n\r\nimport App from './app';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}