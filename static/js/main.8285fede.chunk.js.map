{"version":3,"sources":["redux/reducer.tsx","redux/redux.tsx","theme/theme.tsx","components/loading-bar/styles.tsx","components/loading-bar/index.tsx","layout/header/styles.tsx","layout/header/index.tsx","layout/styles.jsx","layout/index.tsx","api.ts","components/section/styles.tsx","components/section/index.tsx","components/poster/styles.tsx","components/poster/index.tsx","components/poster-wrap/styles.tsx","components/poster-wrap/index.tsx","components/message/styles.tsx","components/message/index.tsx","pages/movie/index.tsx","pages/tv/index.tsx","pages/search/styles.tsx","pages/search/index.tsx","pages/detail/index.tsx","Routes.jsx","App.tsx","index.tsx"],"names":["reducer","isLoading","action","state","type","payload","appReducer","combineReducers","store","createStore","theme","main","Wrapper","styled","div","LoadingBar","LinearProgress","className","Grid","Icon","span","props","iconUrl","coverUrl","data","key","value","icon","cover","Header","container","justify","item","map","x","index","to","activeClassName","Layout","children","api","axios","create","baseURL","interceptors","request","use","config","dispatch","params","error","Promise","reject","response","movieApi","get","searchText","query","tvApi","Section","title","Image","bgUrl","Poster","rating","id","imageUrl","year","star_rating","length","substring","style","width","PosterWrap","Message","text","Movie","useState","nowPlaying","upComing","popular","setData","MovieFunction","a","results","console","log","e","useEffect","Helmet","vote_average","poster_path","original_title","release_date","Tv","topRated","airingToday","original_name","first_air_date","Search","movieResult","tvResult","searchTerm","searchTermRef","useRef","searchFunction","current","encodeURIComponent","movieResults","tvResults","ref","placeholder","onKeyUp","Detail","Routes","path","exact","component","from","App","useSelector","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8285fede.chunk.js","sourcesContent":["// 전역 state 값 타입정의\r\ntype ReducerType = {\r\n   isLoading: boolean;\r\n};\r\n\r\n// 전역 state 값 초기값 설정\r\nconst reducer: ReducerType = {\r\n   isLoading: false,\r\n};\r\n\r\n// 액션 type 선언\r\n// as const 를 안하면 string으로 정의 되어 리듀서 구현 오류 생김\r\nconst SET_IS_LOADING = 'SET_IS_LOADING' as const;\r\n\r\n// 액션 생성 함수 선언\r\nexport const setIsLoading = (isLoading: boolean) => ({\r\n   type: SET_IS_LOADING,\r\n   payload: isLoading,\r\n});\r\n\r\n// 액션 객체들을 위한 타입 정의\r\ntype ActionType = ReturnType<typeof setIsLoading>;\r\n\r\nconst action = (state: ReducerType = reducer, action: ActionType) => {\r\n   switch (action.type) {\r\n      case 'SET_IS_LOADING':\r\n         return { ...state, isLoading: action.payload };\r\n\r\n      default:\r\n         return state;\r\n   }\r\n};\r\n\r\nexport default action;\r\n","import { createStore, combineReducers } from 'redux';\r\n\r\nimport reducer from './reducer';\r\n\r\nconst appReducer = combineReducers({\r\n   reducer,\r\n});\r\n\r\nexport const store = createStore(appReducer);\r\n\r\n// useSelector를 위해 필요\r\nexport type RootState = ReturnType<typeof appReducer>;\r\n","import { DefaultTheme } from 'styled-components';\r\n\r\nexport const theme: DefaultTheme = {\r\n   main: `rgba(20,20,20,1)`,\r\n};\r\n","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n   position: fixed;\r\n   left: 0;\r\n   right: 0;\r\n   top: 0;\r\n   z-index: 2500;\r\n   & .progress_bar {\r\n      position: relative;\r\n      width: 100%;\r\n      & > div {\r\n         background: #27ae60;\r\n      }\r\n   }\r\n   & .click_block {\r\n      width: 100%;\r\n      height: 100vh;\r\n   }\r\n`;\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport Wrapper from './styles';\r\nimport { Grid, LinearProgress } from '@material-ui/core';\r\n\r\nconst LoadingBar: React.FC = () => {\r\n   return (\r\n      <Wrapper>\r\n         <LinearProgress className=\"progress_bar\" />\r\n         <Grid className=\"click_block\" />\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default LoadingBar;\r\n","import { type } from 'os';\r\nimport styled from 'styled-components';\r\n\r\ntype IconType = {\r\n   iconUrl: string;\r\n   coverUrl: string;\r\n};\r\n\r\nexport const Icon = styled.span<IconType>`\r\n   display: inline-block;\r\n   position: absolute;\r\n   left: 50%;\r\n   top: 50%;\r\n   transform: translate(-50%, -50%);\r\n   width: 24px;\r\n   height: 24px;\r\n   background: url(${(props) => `${props.iconUrl}`});\r\n   background-size: 24px;\r\n   &::before {\r\n      content: '';\r\n      position: absolute;\r\n      left: 0;\r\n      top: 0;\r\n      width: 0px;\r\n      height: 24px;\r\n      background: url(${(props) => `${props.coverUrl}`});\r\n      background-size: 24px;\r\n      transition: all 0.4s;\r\n   }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n   position: fixed;\r\n   left: 0;\r\n   top: 0;\r\n   width: 100%;\r\n   z-index: 2000;\r\n   background: rgba(20, 20, 20, 1);\r\n   & > .header_wrap {\r\n      & > div {\r\n         & a {\r\n            position: relative;\r\n            display: inline-block;\r\n            width: 80px;\r\n            height: 60px;\r\n            color: #fff;\r\n            text-align: center;\r\n            &.on .icon::before {\r\n               width: 24px;\r\n            }\r\n         }\r\n      }\r\n   }\r\n`;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { Wrapper, Icon } from './styles';\r\n\r\nconst data = [\r\n   {\r\n      key: '/movie',\r\n      value: 'Movie',\r\n      icon: '/dongflix/images/icon/movie_icon.png',\r\n      cover: '/dongflix/images/icon/movie_icon_c.png',\r\n   },\r\n   { key: '/tv', value: 'TV', icon: '/dongflix/images/icon/tv_icon.png', cover: '/dongflix/images/icon/tv_icon_c.png' },\r\n   {\r\n      key: '/search',\r\n      value: 'Search',\r\n      icon: '/dongflix/images/icon/search_icon.png',\r\n      cover: '/dongflix/images/icon/search_icon_c.png',\r\n   },\r\n];\r\n\r\nconst Header: React.FC = () => {\r\n   return (\r\n      <Wrapper>\r\n         <Grid container justify=\"space-between\" className=\"header_wrap\">\r\n            <Grid item>\r\n               {data.map((x, index) => {\r\n                  return (\r\n                     index !== 2 && (\r\n                        <NavLink key={index} to={x.key} activeClassName=\"on\">\r\n                           <Icon iconUrl={x.icon} coverUrl={x.cover} className=\"icon\" />\r\n                        </NavLink>\r\n                     )\r\n                  );\r\n               })}\r\n            </Grid>\r\n            <Grid item>\r\n               {data.map((x, index) => {\r\n                  return (\r\n                     index === 2 && (\r\n                        <NavLink key={index} to={x.key} activeClassName=\"on\">\r\n                           <Icon iconUrl={x.icon} coverUrl={x.cover} className=\"icon\" />\r\n                        </NavLink>\r\n                     )\r\n                  );\r\n               })}\r\n            </Grid>\r\n         </Grid>\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default Header;\r\n","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n   & .content {\r\n      padding-top: 60px;\r\n   }\r\n`;\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport Header from './header';\r\nimport Wrapper from './styles';\r\n\r\ntype LayoutType = {\r\n   children: React.ReactNode;\r\n};\r\n\r\nconst Layout: React.FC<LayoutType> = ({ children }) => {\r\n   return (\r\n      <Wrapper>\r\n         <Header />\r\n         <Grid className=\"content\">{children}</Grid>\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default Layout;\r\n","import axios from 'axios';\r\nimport { store } from './redux/redux';\r\n\r\nconst api = axios.create({\r\n   baseURL: 'https://api.themoviedb.org/3/',\r\n});\r\n\r\napi.interceptors.request.use(\r\n   function (config) {\r\n      // 요청 바로 직전\r\n      store.dispatch({\r\n         type: 'SET_IS_LOADING',\r\n         payload: true,\r\n      });\r\n      config.params = config.params || {};\r\n      config.params['api_key'] = '4e88b4f1dedb08e14ee3e3dbe7eeb858';\r\n      config.params['language'] = 'en-US';\r\n      return config;\r\n   },\r\n   function (error) {\r\n      // 요청 에러 처리를 작성합니다.\r\n      store.dispatch({\r\n         type: 'SET_IS_LOADING',\r\n         payload: false,\r\n      });\r\n      return Promise.reject(error);\r\n   }\r\n);\r\n\r\napi.interceptors.response.use(\r\n   function (response) {\r\n      /* 200처리 */\r\n      store.dispatch({\r\n         type: 'SET_IS_LOADING',\r\n         payload: false,\r\n      });\r\n      return response;\r\n   },\r\n\r\n   function (error) {\r\n      /*200 외 처리*/\r\n      store.dispatch({\r\n         type: 'SET_IS_LOADING',\r\n         payload: false,\r\n      });\r\n      return Promise.reject(error);\r\n   }\r\n);\r\n\r\n// api\r\n\r\nexport const movieApi = {\r\n   nowPlaying: () => api.get('movie/now_playing'),\r\n   upComing: () => api.get('movie/upcoming'),\r\n   popular: () => api.get('movie/popular'),\r\n   movieDetail: (id: number) =>\r\n      api.get(`movie/${id}`, {\r\n         params: {\r\n            append_to_response: 'videos',\r\n         },\r\n      }),\r\n   search: (searchText: string) =>\r\n      api.get('/search/movie', {\r\n         params: {\r\n            // 해외 공용 api라 encodeURIComponent(인코딩) 된 문자가 와야함\r\n            query: searchText,\r\n         },\r\n      }),\r\n};\r\n\r\nexport const tvApi = {\r\n   topRated: () => api.get('tv/top_rated'),\r\n   popular: () => api.get('tv/popular'),\r\n   airingToday: () => api.get('tv/airing_today'),\r\n   tvDetail: (id: number) =>\r\n      api.get(`tv/${id}`, {\r\n         params: {\r\n            append_to_response: 'video',\r\n         },\r\n      }),\r\n   search: (searchText: string) =>\r\n      api.get('/search/tv', {\r\n         params: {\r\n            // 해외 공용 api라 encodeURIComponent(인코딩) 된 문자가 와야함\r\n            query: searchText,\r\n         },\r\n      }),\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  & > h2 {\r\n    color: #fff;\r\n    font-weight: bold;\r\n    font-size: 14px;\r\n  }\r\n  & > span {\r\n    color: #fff;\r\n    font-size: 14px;\r\n  }\r\n`;\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport Wrapper from './styles';\r\nimport { Grid } from '@material-ui/core';\r\n\r\ntype SectionType = {\r\n   title: string;\r\n   children?: React.ReactNode;\r\n};\r\n\r\nconst Section: React.FC<SectionType> = ({ title, children }) => {\r\n   return (\r\n      <Wrapper>\r\n         <h2>{title}</h2>\r\n         <Grid container>{children}</Grid>\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default Section;\r\n","import styled from 'styled-components';\r\n\r\ntype ImageType = {\r\n   bgUrl: string;\r\n};\r\n\r\nexport const Image = styled.div<ImageType>`\r\n   background: url(${(props) => `${props.bgUrl}`}) center center;\r\n   background-size: cover;\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n   cursor: pointer;\r\n   * {\r\n      transition: all 0.4s;\r\n   }\r\n   & .image_wrap {\r\n      margin-bottom: 5px;\r\n   }\r\n   & .image {\r\n      position: relative;\r\n      height: 250px;\r\n      border-radius: 4px;\r\n      transition: all 0.4s ease;\r\n      & .text_box {\r\n         position: absolute;\r\n         left: 0;\r\n         top: 50px;\r\n         z-index: 2000;\r\n         width: 100%;\r\n         opacity: 0;\r\n         text-align: center;\r\n         transition: all 0.4s ease;\r\n         & .title {\r\n            margin-bottom: 3px;\r\n            color: #000;\r\n            font-size: 14px;\r\n            font-weight: bold;\r\n            text-shadow: 2px 2px rgba(0, 0, 0, 0.09);\r\n         }\r\n         & .year {\r\n            padding-top: 15px;\r\n            color: #000;\r\n            font-size: 14px;\r\n            color: #000;\r\n            font-weight: bold;\r\n            text-shadow: 2px 2px rgba(0, 0, 0, 0.09);\r\n         }\r\n      }\r\n      & .rating {\r\n         position: absolute;\r\n         left: 0;\r\n         bottom: 10px;\r\n         width: 100%;\r\n         opacity: 0;\r\n         padding: 0 8px;\r\n         & .star {\r\n            position: relative;\r\n            display: block;\r\n            width: 100px;\r\n            height: 24px;\r\n            margin: 0 auto;\r\n            background: url('/dongflix/images/star.png') no-repeat;\r\n         }\r\n         & .star_cover {\r\n            position: absolute;\r\n            left: 0px;\r\n            top: 0;\r\n            display: block;\r\n            width: 0;\r\n            height: 24px;\r\n            background: url('/dongflix/images/star_cover.png') no-repeat;\r\n         }\r\n      }\r\n      &::before {\r\n         content: '';\r\n         position: absolute;\r\n         left: 0;\r\n         top: 0;\r\n         width: 100%;\r\n         height: 100%;\r\n         background: rgba(255, 255, 255, 0.7);\r\n         opacity: 0;\r\n         transition: all 0.4s ease;\r\n         border-radius: 4px;\r\n      }\r\n      &:hover .text_box {\r\n         opacity: 1;\r\n      }\r\n      &:hover .rating {\r\n         opacity: 1;\r\n      }\r\n      &:hover::before {\r\n         opacity: 1;\r\n      }\r\n   }\r\n`;\r\n","import React from 'react';\r\nimport { Wrapper, Image } from './styles';\r\nimport { Grid } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\ntype PosterType = {\r\n   id: number;\r\n   imageUrl: string;\r\n   title: string;\r\n   rating: number;\r\n   year: string;\r\n   type: string;\r\n};\r\n\r\nconst Poster: React.FC<PosterType> = ({ type, rating, id, imageUrl, title, year }) => {\r\n   let star_rating = rating * 10;\r\n   return (\r\n      <Link to={type === 'movie' ? `/movie/detail/${id}` : `/tv/detail/${id}`}>\r\n         <Wrapper>\r\n            <Grid className=\"image_wrap\">\r\n               <Image bgUrl={imageUrl ? `https://image.tmdb.org/t/p/w200${imageUrl}` : '/dongflix/images/notVideo.jpg'} className=\"image\">\r\n                  <Grid className=\"text_box\">\r\n                     <h2 className=\"title\">{title.length > 15 ? `${title.substring(0, 15)}...` : title}</h2>\r\n                     <p className=\"year\">{year}</p>\r\n                  </Grid>\r\n                  <span className=\"rating\">\r\n                     <span className=\"star\">\r\n                        <span className=\"star_cover\" style={{ width: `${star_rating}%` }} />\r\n                     </span>\r\n                  </span>\r\n               </Image>\r\n            </Grid>\r\n         </Wrapper>\r\n      </Link>\r\n   );\r\n};\r\n\r\nexport default Poster;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n   * {\r\n      transition: all 0.4s;\r\n   }\r\n   & .poster_wrap {\r\n      padding: 40px 0px;\r\n      & .poster {\r\n         width: calc(100% / 12);\r\n         padding: 4px;\r\n      }\r\n      & > div {\r\n         padding-bottom: 40px;\r\n         & > h2 {\r\n            padding-bottom: 40px;\r\n            text-indent: 4px;\r\n            color: #fff;\r\n         }\r\n         & > span {\r\n            display: inline-block;\r\n            width: 20%;\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 1756px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 11);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 1610px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 10);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 1462px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 9);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 1315px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 8);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 1170px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 7);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 1025px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 6);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 876px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 5);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 730px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 4);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 584px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 3);\r\n         }\r\n      }\r\n   }\r\n`;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport { Wrapper } from './styles';\r\n\r\ntype PosterWrapType = {\r\n   children: React.ReactNode;\r\n};\r\n\r\nconst PosterWrap: React.FC<PosterWrapType> = ({ children }) => {\r\n   return (\r\n      <Wrapper>\r\n         <Grid className=\"poster_wrap\">{children}</Grid>\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default PosterWrap;\r\n","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n   padding: 64px 24px;\r\n   width: 100vw;\r\n   & h2 {\r\n      width: 100%;\r\n      text-align: center;\r\n      color: #e74c3c;\r\n      font-weight: bold;\r\n   }\r\n`;\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport Wrapper from './styles';\r\n\r\ntype MessageType = {\r\n   text: string,\r\n};\r\n\r\nconst Message: React.FC<MessageType> = ({ text }) => {\r\n   return (\r\n      <Wrapper>\r\n         <h2>{text}</h2>\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default Message;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport Helmet from 'react-helmet';\r\nimport { movieApi } from 'api';\r\n\r\nimport Section from 'components/section';\r\nimport Poster from 'components/poster';\r\nimport PosterWrap from 'components/poster-wrap';\r\nimport Message from 'components/message';\r\n\r\ntype DataType = {\r\n   nowPlaying: any[];\r\n   upComing: any[];\r\n   popular: any[];\r\n   error: string;\r\n};\r\n\r\nconst Movie: React.FC = () => {\r\n   const [data, setData] = useState<DataType>({\r\n      nowPlaying: [],\r\n      upComing: [],\r\n      popular: [],\r\n      error: '',\r\n   });\r\n   const MovieFunction = async () => {\r\n      try {\r\n         const nowPlaying = await movieApi.nowPlaying();\r\n         const upComing = await movieApi.upComing();\r\n         const popular = await movieApi.popular();\r\n         setData({\r\n            ...data,\r\n            nowPlaying: nowPlaying.data.results,\r\n            upComing: upComing.data.results,\r\n            popular: popular.data.results,\r\n         });\r\n         console.log({\r\n            ...data,\r\n            nowPlaying: nowPlaying.data.results,\r\n            upComing: upComing.data.results,\r\n            popular: popular.data.results,\r\n         });\r\n      } catch (e) {\r\n         console.log({ e });\r\n         setData({ ...data, error: \"Can't find Tvs information.\" });\r\n      }\r\n   };\r\n\r\n   useEffect(() => {\r\n      MovieFunction();\r\n   }, []);\r\n   return (\r\n      <>\r\n         <Helmet>\r\n            <title>Movies | Dongflix</title>\r\n         </Helmet>\r\n         <PosterWrap>\r\n            {/*  */}\r\n            {data.nowPlaying && data.nowPlaying.length > 0 && (\r\n               <Section title=\"Now Playing\">\r\n                  {data.nowPlaying.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              type=\"movie\"\r\n                              rating={x.vote_average}\r\n                              id={x.id}\r\n                              imageUrl={x.poster_path}\r\n                              title={x.original_title}\r\n                              year={x.release_date.substring(0, 4)}\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.upComing && data.upComing.length > 0 && (\r\n               <Section title=\"UpComing Movies\">\r\n                  {data.upComing.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              type=\"movie\"\r\n                              rating={x.vote_average}\r\n                              id={x.id}\r\n                              imageUrl={x.poster_path}\r\n                              title={x.original_title}\r\n                              year={x.release_date.substring(0, 4)}\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.popular && data.popular.length > 0 && (\r\n               <Section title=\"Popular Movies\">\r\n                  {data.popular.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              type=\"movie\"\r\n                              rating={x.vote_average}\r\n                              id={x.id}\r\n                              imageUrl={x.poster_path}\r\n                              title={x.original_title}\r\n                              year={x.release_date.substring(0, 4)}\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.error && <Message text={data.error} />}\r\n         </PosterWrap>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Movie;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport Helmet from 'react-helmet';\r\nimport { tvApi } from 'api';\r\n\r\nimport Section from 'components/section';\r\nimport Poster from 'components/poster';\r\nimport PosterWrap from 'components/poster-wrap';\r\nimport Message from 'components/message';\r\n\r\ntype DataType = {\r\n   topRated: any[];\r\n   popular: any[];\r\n   airingToday: any[];\r\n   error: string;\r\n};\r\n\r\nconst Tv: React.FC = () => {\r\n   const [data, setData] = useState<DataType>({\r\n      topRated: [],\r\n      popular: [],\r\n      airingToday: [],\r\n      error: '',\r\n   });\r\n   const MovieFunction = async () => {\r\n      try {\r\n         const topRated = await tvApi.topRated();\r\n         const popular = await tvApi.popular();\r\n         const airingToday = await tvApi.airingToday();\r\n         setData({\r\n            ...data,\r\n            topRated: topRated.data.results,\r\n            popular: popular.data.results,\r\n            airingToday: airingToday.data.results,\r\n         });\r\n      } catch (e) {\r\n         console.log({ e });\r\n         setData({ ...data, error: \"Can't find Tvs information.\" });\r\n      }\r\n   };\r\n\r\n   useEffect(() => {\r\n      MovieFunction();\r\n   }, []);\r\n   return (\r\n      <>\r\n         <Helmet>\r\n            <title>Movies | Dongflix</title>\r\n         </Helmet>\r\n         <PosterWrap>\r\n            {/*  */}\r\n            {data.topRated && data.topRated.length > 0 && (\r\n               <Section title=\"Top Rated\">\r\n                  {data.topRated.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              id={x.id}\r\n                              title={x.original_name}\r\n                              imageUrl={x.poster_path}\r\n                              rating={x.vote_average}\r\n                              year={x.first_air_date.substring(0, 4)}\r\n                              type=\"tv\"\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.popular && data.popular.length > 0 && (\r\n               <Section title=\"Popular TV\">\r\n                  {data.popular.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              id={x.id}\r\n                              title={x.original_name}\r\n                              imageUrl={x.poster_path}\r\n                              rating={x.vote_average}\r\n                              year={x.first_air_date.substring(0, 4)}\r\n                              type=\"tv\"\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.airingToday && data.airingToday.length > 0 && (\r\n               <Section title=\"Airing Today TV\">\r\n                  {data.airingToday.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              id={x.id}\r\n                              title={x.original_name}\r\n                              imageUrl={x.poster_path}\r\n                              rating={x.vote_average}\r\n                              year={x.first_air_date.substring(0, 4)}\r\n                              type=\"tv\"\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.error && <Message text={data.error} />}\r\n         </PosterWrap>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Tv;\r\n","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n   padding: 40px 0px;\r\n   & .search_form {\r\n      width: 100%;\r\n      & input {\r\n         width: 100%;\r\n         padding: 0 8px;\r\n         font-size: 28px;\r\n         color: rgba(255, 255, 255, 1);\r\n         background: none;\r\n         border: none;\r\n         outline: none;\r\n         &::placeholder {\r\n            color: rgba(255, 255, 255, 0.6);\r\n         }\r\n      }\r\n   }\r\n`;\r\nexport default Wrapper;\r\n","import React, { useState, useRef } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { Grid } from '@material-ui/core';\r\nimport { movieApi, tvApi } from 'api';\r\n\r\nimport Wrapper from './styles';\r\nimport Section from 'components/section';\r\nimport Poster from 'components/poster';\r\nimport PosterWrap from 'components/poster-wrap';\r\nimport Message from 'components/message';\r\n\r\ntype DataType = {\r\n   movieResult: any[] | null;\r\n   tvResult: any[] | null;\r\n   searchTerm: string;\r\n   error: string;\r\n};\r\n\r\nconst Search: React.FC = () => {\r\n   const [data, setData] = useState<DataType>({\r\n      movieResult: null,\r\n      tvResult: null,\r\n      searchTerm: '',\r\n      error: '',\r\n   });\r\n\r\n   const searchTermRef = useRef<HTMLInputElement>(null);\r\n\r\n   const searchFunction = async () => {\r\n      let searchTerm: string | undefined = searchTermRef.current?.value;\r\n      try {\r\n         if (searchTerm) {\r\n            let movieResults = await movieApi.search(encodeURIComponent(searchTerm));\r\n            let tvResults = await tvApi.search(encodeURIComponent(searchTerm));\r\n            setData({\r\n               ...data,\r\n               movieResult: [...movieResults.data.results],\r\n               tvResult: [...tvResults.data.results],\r\n               searchTerm: searchTerm,\r\n            });\r\n         } else if (searchTerm === '') {\r\n            setData({\r\n               movieResult: [],\r\n               tvResult: [],\r\n               searchTerm: '',\r\n               error: '',\r\n            });\r\n         }\r\n      } catch (e) {\r\n         setData({ ...data, error: \"Can't find results.\" });\r\n      }\r\n   };\r\n\r\n   return (\r\n      <Wrapper>\r\n         <Helmet>\r\n            <title>Search | Dongflix</title>\r\n         </Helmet>\r\n         {/*  */}\r\n         <Grid className=\"search_form\">\r\n            <input\r\n               type=\"text\"\r\n               ref={searchTermRef}\r\n               placeholder=\"Search Movies or TV Shows...\"\r\n               onKeyUp={(e) => e.key === 'Enter' && searchFunction()}\r\n            />\r\n         </Grid>\r\n         {/*  */}\r\n         <PosterWrap>\r\n            {data.movieResult && data.movieResult.length > 0 && (\r\n               <Section title=\"Movie Results\">\r\n                  {data.movieResult.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              id={x.id}\r\n                              title={x.original_title}\r\n                              imageUrl={x.poster_path}\r\n                              rating={x.vote_average}\r\n                              year={x && x.release_date && x.release_date.substring(0, 4) && x.release_date.substring(0, 4)}\r\n                              type=\"movie\"\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.tvResult && data.tvResult.length > 0 && (\r\n               <Section title=\"TV Results\">\r\n                  {data.tvResult.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              id={x.id}\r\n                              title={x.original_name}\r\n                              imageUrl={x.poster_path}\r\n                              rating={x.vote_average}\r\n                              year={\r\n                                 x && x.first_air_date && x.first_air_date.substring(0, 4) ? x.first_air_date.substring(0, 4) : 'Not Found'\r\n                              }\r\n                              type=\"tv\"\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.movieResult && data.tvResult && data.movieResult.length === 0 && data.tvResult.length === 0 && data.searchTerm !== '' && (\r\n               <Message text={`Nothing found : ${data.searchTerm}`} />\r\n            )}\r\n            {/*  */}\r\n         </PosterWrap>\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\n\r\nconst Detail = () => {\r\n   return (\r\n      <>\r\n         <Helmet>\r\n            <title>Detail | Dongflix</title>\r\n         </Helmet>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Detail;\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\r\n\r\n// layout\r\nimport Layout from './layout';\r\n\r\n// pages\r\nimport Movie from 'pages/movie';\r\nimport Tv from 'pages/tv';\r\nimport Search from 'pages/search';\r\nimport Detail from 'pages/detail';\r\n\r\nconst Routes = () => {\r\n   return (\r\n      <BrowserRouter>\r\n         <Layout>\r\n            <Switch>\r\n               <Route path=\"/\" exact component={Movie} />\r\n               <Route path=\"/movie\" exact component={Movie} />\r\n               <Route path=\"/tv\" exact component={Tv} />\r\n               <Route path=\"/search\" component={Search} />\r\n               <Route path=\"/movie/detail/:id\" component={Detail} />\r\n               <Route path=\"/tv/detail/:id\" component={Detail} />\r\n\r\n               <Redirect from=\"*\" to=\"/movie\" />\r\n            </Switch>\r\n         </Layout>\r\n      </BrowserRouter>\r\n   );\r\n};\r\nexport default Routes;\r\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from './redux/redux';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from 'theme/theme';\nimport LoadingBar from './components/loading-bar';\n\nimport Routes from './Routes';\n\nconst App: React.FC = () => {\n   const reducer = useSelector((state: RootState) => state.reducer);\n   return (\n      <ThemeProvider theme={theme}>\n         {reducer.isLoading && <LoadingBar />}\n         <Routes />\n      </ThemeProvider>\n   );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from 'redux/redux';\n\nimport App from './App';\n\n// IE11의 경우\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\n// css\nimport './css/reset.css';\nimport './css/global.css';\n\nReactDOM.render(\n   <Provider store={store}>\n      <App />\n   </Provider>,\n   document.getElementById('root')\n);\n"],"sourceRoot":""}