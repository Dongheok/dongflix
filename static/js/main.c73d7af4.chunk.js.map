{"version":3,"sources":["redux/reducer.tsx","redux/redux.tsx","theme/theme.tsx","components/loading-bar/styles.tsx","components/loading-bar/index.tsx","layout/header/styles.tsx","layout/header/index.tsx","layout/styles.jsx","layout/index.tsx","api.ts","components/section/styles.tsx","components/section/index.tsx","components/poster/styles.tsx","components/poster/index.tsx","components/poster-wrap/styles.tsx","components/poster-wrap/index.tsx","components/message/styles.tsx","components/message/index.tsx","pages/movie/index.tsx","pages/tv/index.tsx","pages/search/styles.tsx","pages/search/index.tsx","pages/detail/styles.tsx","pages/detail/index.tsx","Routes.jsx","App.tsx","index.tsx"],"names":["reducer","isLoading","action","state","type","payload","appReducer","combineReducers","store","createStore","theme","main","bg","Wrapper","styled","div","props","LoadingBar","LinearProgress","className","Grid","Icon","span","iconUrl","coverUrl","data","key","value","icon","cover","Header","container","justify","item","map","x","index","to","activeClassName","Layout","children","api","axios","create","baseURL","interceptors","request","use","config","dispatch","params","error","Promise","reject","response","movieApi","get","id","append_to_response","searchText","query","tvApi","Section","title","Image","bgUrl","Poster","rating","imageUrl","year","star_rating","length","substring","style","width","PosterWrap","Message","text","Movie","useState","nowPlaying","upComing","popular","setData","MovieFunction","a","results","console","log","e","useEffect","Helmet","vote_average","poster_path","original_title","release_date","Tv","topRated","airingToday","TvFunction","original_name","first_air_date","Search","movieResult","tvResult","searchTerm","currentSearchTerm","setCurrentSearchTerm","searchFunction","term","decodeURIComponent","JSON","parse","encodeURIComponent","localStorage","setItem","stringify","movieResults","tvResults","getItem","placeholder","onChange","target","onKeyUp","Backdrop","Detail","history","useHistory","useParams","parseIntId","parseInt","result","dataType","location","pathname","split","youtubeSw","setYoutubeSw","DetailDataFunction","isNaN","push","backdrop_path","src","alt","alignItems","genres","name","runtime","episode_run_time","href","homepage","rel","overview","videos","onClick","allow","Routes","basename","path","exact","component","from","App","useSelector","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c73d7af4.chunk.js","sourcesContent":["// 전역 state 값 타입정의\r\ntype ReducerType = {\r\n   isLoading: boolean;\r\n};\r\n\r\n// 전역 state 값 초기값 설정\r\nconst reducer: ReducerType = {\r\n   isLoading: false,\r\n};\r\n\r\n// 액션 type 선언\r\n// as const 를 안하면 string으로 정의 되어 리듀서 구현 오류 생김\r\nconst SET_IS_LOADING = 'SET_IS_LOADING' as const;\r\n\r\n// 액션 생성 함수 선언\r\nexport const setIsLoading = (isLoading: boolean) => ({\r\n   type: SET_IS_LOADING,\r\n   payload: isLoading,\r\n});\r\n\r\n// 액션 객체들을 위한 타입 정의\r\ntype ActionType = ReturnType<typeof setIsLoading>;\r\n\r\nconst action = (state: ReducerType = reducer, action: ActionType) => {\r\n   switch (action.type) {\r\n      case 'SET_IS_LOADING':\r\n         return { ...state, isLoading: action.payload };\r\n\r\n      default:\r\n         return state;\r\n   }\r\n};\r\n\r\nexport default action;\r\n","import { createStore, combineReducers } from 'redux';\r\n\r\nimport reducer from './reducer';\r\n\r\nconst appReducer = combineReducers({\r\n   reducer,\r\n});\r\n\r\nexport const store = createStore(appReducer);\r\n\r\n// useSelector를 위해 필요\r\nexport type RootState = ReturnType<typeof appReducer>;\r\n","import { DefaultTheme } from 'styled-components';\r\n\r\nexport const theme: DefaultTheme = {\r\n   main: `#27ae60`,\r\n   bg:`rgba(20,20,20,1)`\r\n};\r\n","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n   position: fixed;\r\n   left: 0;\r\n   right: 0;\r\n   top: 0;\r\n   z-index: 2500;\r\n   & .progress_bar {\r\n      position: relative;\r\n      width: 100%;\r\n      background:${props=>props.theme.bg};\r\n      & > div {\r\n         background: ${props=>props.theme.main};\r\n      }\r\n   }\r\n   & .click_block {\r\n      width: 100%;\r\n      height: 100vh;\r\n   }\r\n`;\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport { Grid, LinearProgress } from '@material-ui/core';\r\nimport Wrapper from './styles';\r\n\r\nconst LoadingBar: React.FC = () => {\r\n   return (\r\n      <Wrapper>\r\n         <LinearProgress className=\"progress_bar\" />\r\n         <Grid className=\"click_block\" />\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default LoadingBar;\r\n","import styled from 'styled-components';\r\n\r\ntype IconType = {\r\n   iconUrl: string;\r\n   coverUrl: string;\r\n};\r\n\r\nexport const Icon = styled.span<IconType>`\r\n   display: inline-block;\r\n   position: absolute;\r\n   left: 50%;\r\n   top: 50%;\r\n   transform: translate(-50%, -50%);\r\n   width: 24px;\r\n   height: 24px;\r\n   background: url(${(props) => `${props.iconUrl}`});\r\n   background-size: 24px;\r\n   &::before {\r\n      content: '';\r\n      position: absolute;\r\n      left: 0;\r\n      top: 0;\r\n      width: 0px;\r\n      height: 24px;\r\n      background: url(${(props) => `${props.coverUrl}`});\r\n      background-size: 24px;\r\n      transition: all 0.4s;\r\n   }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n   position: fixed;\r\n   left: 0;\r\n   top: 0;\r\n   width: 100%;\r\n   z-index: 2000;\r\n   background: rgba(20, 20, 20, 1);\r\n   & > .header_wrap {\r\n      & > div {\r\n         & a {\r\n            position: relative;\r\n            display: inline-block;\r\n            width: 80px;\r\n            height: 60px;\r\n            color: #fff;\r\n            text-align: center;\r\n            &.on .icon::before {\r\n               width: 24px;\r\n            }\r\n         }\r\n      }\r\n   }\r\n`;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { Wrapper, Icon } from './styles';\r\n\r\nconst data = [\r\n   {\r\n      key: '/movie',\r\n      value: 'Movie',\r\n      icon: '/dongflix/images/icon/movie_icon.png',\r\n      cover: '/dongflix/images/icon/movie_icon_c.png',\r\n   },\r\n   { key: '/tv', value: 'TV', icon: '/dongflix/images/icon/tv_icon.png', cover: '/dongflix/images/icon/tv_icon_c.png' },\r\n   {\r\n      key: '/search',\r\n      value: 'Search',\r\n      icon: '/dongflix/images/icon/search_icon.png',\r\n      cover: '/dongflix/images/icon/search_icon_c.png',\r\n   },\r\n];\r\n\r\nconst Header: React.FC = () => {\r\n   return (\r\n      <Wrapper>\r\n         <Grid container justify=\"space-between\" className=\"header_wrap\">\r\n            <Grid item>\r\n               {data.map((x, index) => {\r\n                  return (\r\n                     index !== 2 && (\r\n                        <NavLink key={index} to={x.key} activeClassName=\"on\">\r\n                           <Icon iconUrl={x.icon} coverUrl={x.cover} className=\"icon\" />\r\n                        </NavLink>\r\n                     )\r\n                  );\r\n               })}\r\n            </Grid>\r\n            <Grid item>\r\n               {data.map((x, index) => {\r\n                  return (\r\n                     index === 2 && (\r\n                        <NavLink key={index} to={x.key} activeClassName=\"on\">\r\n                           <Icon iconUrl={x.icon} coverUrl={x.cover} className=\"icon\" />\r\n                        </NavLink>\r\n                     )\r\n                  );\r\n               })}\r\n            </Grid>\r\n         </Grid>\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default Header;\r\n","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n   & .content {\r\n      padding-top: 60px;\r\n   }\r\n`;\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport Header from './header';\r\nimport Wrapper from './styles';\r\n\r\ntype LayoutType = {\r\n   children: React.ReactNode;\r\n};\r\n\r\nconst Layout: React.FC<LayoutType> = ({ children }) => {\r\n   return (\r\n      <Wrapper>\r\n         <Header />\r\n         <Grid className=\"content\">{children}</Grid>\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default Layout;\r\n","import axios from 'axios';\r\nimport { store } from 'redux/redux';\r\n\r\nconst api = axios.create({\r\n   baseURL: 'https://api.themoviedb.org/3/',\r\n});\r\n\r\napi.interceptors.request.use(\r\n   function (config) {\r\n      // 요청 바로 직전\r\n      store.dispatch({\r\n         type: 'SET_IS_LOADING',\r\n         payload: true,\r\n      });\r\n      config.params = config.params || {};\r\n      config.params['api_key'] = '4e88b4f1dedb08e14ee3e3dbe7eeb858';\r\n      config.params['language'] = 'en-US';\r\n      return config;\r\n   },\r\n   function (error) {\r\n      // 요청 에러 처리를 작성합니다.\r\n      store.dispatch({\r\n         type: 'SET_IS_LOADING',\r\n         payload: false,\r\n      });\r\n      return Promise.reject(error);\r\n   }\r\n);\r\n\r\napi.interceptors.response.use(\r\n   function (response) {\r\n      /* 200처리 */\r\n      store.dispatch({\r\n         type: 'SET_IS_LOADING',\r\n         payload: false,\r\n      });\r\n      return response;\r\n   },\r\n\r\n   function (error) {\r\n      /*200 외 처리*/\r\n      store.dispatch({\r\n         type: 'SET_IS_LOADING',\r\n         payload: false,\r\n      });\r\n      return Promise.reject(error);\r\n   }\r\n);\r\n\r\n// api\r\n\r\nexport const movieApi = {\r\n   nowPlaying: () => api.get('movie/now_playing'),\r\n   upComing: () => api.get('movie/upcoming'),\r\n   popular: () => api.get('movie/popular'),\r\n   movieDetail: (id: number) =>\r\n      api.get(`movie/${id}`, {\r\n         params: {\r\n            append_to_response: 'videos',\r\n         },\r\n      }),\r\n   search: (searchText: string) =>\r\n      api.get('/search/movie', {\r\n         params: {\r\n            // 해외 공용 api라 encodeURIComponent(인코딩) 된 문자가 와야함\r\n            query: searchText,\r\n         },\r\n      }),\r\n};\r\n\r\nexport const tvApi = {\r\n   topRated: () => api.get('tv/top_rated'),\r\n   popular: () => api.get('tv/popular'),\r\n   airingToday: () => api.get('tv/airing_today'),\r\n   tvDetail: (id: number) =>\r\n      api.get(`tv/${id}`, {\r\n         params: {\r\n            append_to_response: 'video',\r\n         },\r\n      }),\r\n   search: (searchText: string) =>\r\n      api.get('/search/tv', {\r\n         params: {\r\n            // 해외 공용 api라 encodeURIComponent(인코딩) 된 문자가 와야함\r\n            query: searchText,\r\n         },\r\n      }),\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  & > h2 {\r\n    color: #fff;\r\n    font-weight: bold;\r\n    font-size: 14px;\r\n  }\r\n  & > span {\r\n    color: #fff;\r\n    font-size: 14px;\r\n  }\r\n`;\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport Wrapper from './styles';\r\nimport { Grid } from '@material-ui/core';\r\n\r\ntype SectionType = {\r\n   title: string;\r\n   children?: React.ReactNode;\r\n};\r\n\r\nconst Section: React.FC<SectionType> = ({ title, children }) => {\r\n   return (\r\n      <Wrapper>\r\n         <h2>{title}</h2>\r\n         <Grid container>{children}</Grid>\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default Section;\r\n","import styled from 'styled-components';\r\n\r\ntype ImageType = {\r\n   bgUrl: string;\r\n};\r\n\r\nexport const Image = styled.div<ImageType>`\r\n   background: url(${(props) => `${props.bgUrl}`}) center center;\r\n   background-size: cover;\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n   cursor: pointer;\r\n   * {\r\n      transition: all 0.4s;\r\n   }\r\n   & .image_wrap {\r\n      margin-bottom: 5px;\r\n   }\r\n   & .image {\r\n      position: relative;\r\n      height: 250px;\r\n      border-radius: 4px;\r\n      transition: all 0.4s ease;\r\n      & .text_box {\r\n         position: absolute;\r\n         left: 0;\r\n         top: 50px;\r\n         z-index: 2000;\r\n         width: 100%;\r\n         opacity: 0;\r\n         text-align: center;\r\n         transition: all 0.4s ease;\r\n         & .title {\r\n            margin-bottom: 3px;\r\n            color: #000;\r\n            font-size: 14px;\r\n            font-weight: bold;\r\n            text-shadow: 2px 2px rgba(0, 0, 0, 0.09);\r\n         }\r\n         & .year {\r\n            padding-top: 15px;\r\n            color: #000;\r\n            font-size: 14px;\r\n            color: #000;\r\n            font-weight: bold;\r\n            text-shadow: 2px 2px rgba(0, 0, 0, 0.09);\r\n         }\r\n      }\r\n      & .rating {\r\n         position: absolute;\r\n         left: 0;\r\n         bottom: 10px;\r\n         width: 100%;\r\n         opacity: 0;\r\n         padding: 0 8px;\r\n         & .star {\r\n            position: relative;\r\n            display: block;\r\n            width: 100px;\r\n            height: 24px;\r\n            margin: 0 auto;\r\n            background: url('/dongflix/images/star.png') no-repeat;\r\n         }\r\n         & .star_cover {\r\n            position: absolute;\r\n            left: 0px;\r\n            top: 0;\r\n            display: block;\r\n            width: 0;\r\n            height: 24px;\r\n            background: url('/dongflix/images/star_cover.png') no-repeat;\r\n         }\r\n      }\r\n      &::before {\r\n         content: '';\r\n         position: absolute;\r\n         left: 0;\r\n         top: 0;\r\n         width: 100%;\r\n         height: 100%;\r\n         background: rgba(255, 255, 255, 0.7);\r\n         opacity: 0;\r\n         transition: all 0.4s ease;\r\n         border-radius: 4px;\r\n      }\r\n      &:hover .text_box {\r\n         opacity: 1;\r\n      }\r\n      &:hover .rating {\r\n         opacity: 1;\r\n      }\r\n      &:hover::before {\r\n         opacity: 1;\r\n      }\r\n   }\r\n`;\r\n","import React from 'react';\r\nimport { Wrapper, Image } from './styles';\r\nimport { Grid } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\ntype PosterType = {\r\n   id: number;\r\n   imageUrl: string;\r\n   title: string;\r\n   rating: number;\r\n   year: string;\r\n   type: string;\r\n};\r\n\r\nconst Poster: React.FC<PosterType> = ({ type, rating, id, imageUrl, title, year }) => {\r\n   let star_rating = rating * 10;\r\n   return (\r\n      <Link to={type === 'movie' ? `/movie/detail/${id}` : `/tv/detail/${id}`}>\r\n         <Wrapper>\r\n            <Grid className=\"image_wrap\">\r\n               <Image bgUrl={imageUrl ? `https://image.tmdb.org/t/p/w200${imageUrl}` : '/dongflix/images/notVideo.jpg'} className=\"image\">\r\n                  <Grid className=\"text_box\">\r\n                     <h2 className=\"title\">{title.length > 15 ? `${title.substring(0, 15)}...` : title}</h2>\r\n                     <p className=\"year\">{year}</p>\r\n                  </Grid>\r\n                  <span className=\"rating\">\r\n                     <span className=\"star\">\r\n                        <span className=\"star_cover\" style={{ width: `${star_rating}%` }} />\r\n                     </span>\r\n                  </span>\r\n               </Image>\r\n            </Grid>\r\n         </Wrapper>\r\n      </Link>\r\n   );\r\n};\r\n\r\nexport default Poster;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n   * {\r\n      transition: all 0.4s;\r\n   }\r\n   & .poster_wrap {\r\n      padding: 40px 0px;\r\n      & .poster {\r\n         width: calc(100% / 12);\r\n         padding: 4px;\r\n      }\r\n      & > div {\r\n         padding-bottom: 40px;\r\n         & > h2 {\r\n            padding-bottom: 40px;\r\n            text-indent: 4px;\r\n            color: #fff;\r\n         }\r\n         & > span {\r\n            display: inline-block;\r\n            width: 20%;\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 1756px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 11);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 1610px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 10);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 1462px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 9);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 1315px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 8);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 1170px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 7);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 1025px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 6);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 876px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 5);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 730px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 4);\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 584px) {\r\n      & .poster_wrap {\r\n         & .poster {\r\n            width: calc(100% / 3);\r\n         }\r\n      }\r\n   }\r\n`;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport { Wrapper } from './styles';\r\n\r\ntype PosterWrapType = {\r\n   children: React.ReactNode;\r\n};\r\n\r\nconst PosterWrap: React.FC<PosterWrapType> = ({ children }) => {\r\n   return (\r\n      <Wrapper>\r\n         <Grid className=\"poster_wrap\">{children}</Grid>\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default PosterWrap;\r\n","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n   padding: 64px 24px;\r\n   width: 100vw;\r\n   & h2 {\r\n      width: 100%;\r\n      text-align: center;\r\n      color: #e74c3c;\r\n      font-weight: bold;\r\n   }\r\n`;\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport Wrapper from './styles';\r\n\r\ntype MessageType = {\r\n   text: string,\r\n};\r\n\r\nconst Message: React.FC<MessageType> = ({ text }) => {\r\n   return (\r\n      <Wrapper>\r\n         <h2>{text}</h2>\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default Message;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport Helmet from 'react-helmet';\r\nimport { movieApi } from 'api';\r\n\r\nimport Section from 'components/section';\r\nimport Poster from 'components/poster';\r\nimport PosterWrap from 'components/poster-wrap';\r\nimport Message from 'components/message';\r\n\r\ntype DataType = {\r\n   nowPlaying: any[];\r\n   upComing: any[];\r\n   popular: any[];\r\n   error: string;\r\n};\r\n\r\nconst Movie: React.FC = () => {\r\n   const [data, setData] = useState<DataType>({\r\n      nowPlaying: [],\r\n      upComing: [],\r\n      popular: [],\r\n      error: '',\r\n   });\r\n   const MovieFunction = async () => {\r\n      try {\r\n         const nowPlaying = await movieApi.nowPlaying();\r\n         const upComing = await movieApi.upComing();\r\n         const popular = await movieApi.popular();\r\n         setData({\r\n            ...data,\r\n            nowPlaying: nowPlaying.data.results,\r\n            upComing: upComing.data.results,\r\n            popular: popular.data.results,\r\n         });\r\n      } catch (e) {\r\n         console.log({ e });\r\n         setData({ ...data, error: \"Can't find Tvs information.\" });\r\n      }\r\n   };\r\n\r\n   useEffect(() => {\r\n      MovieFunction();\r\n   }, []);\r\n   return (\r\n      <>\r\n         <Helmet>\r\n            <title>Movies | Dongflix</title>\r\n         </Helmet>\r\n         <PosterWrap>\r\n            {/*  */}\r\n            {data.nowPlaying && data.nowPlaying.length > 0 && (\r\n               <Section title=\"Now Playing\">\r\n                  {data.nowPlaying.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              type=\"movie\"\r\n                              rating={x.vote_average}\r\n                              id={x.id}\r\n                              imageUrl={x.poster_path}\r\n                              title={x.original_title}\r\n                              year={x.release_date.substring(0, 4)}\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.upComing && data.upComing.length > 0 && (\r\n               <Section title=\"UpComing Movies\">\r\n                  {data.upComing.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              type=\"movie\"\r\n                              rating={x.vote_average}\r\n                              id={x.id}\r\n                              imageUrl={x.poster_path}\r\n                              title={x.original_title}\r\n                              year={x.release_date.substring(0, 4)}\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.popular && data.popular.length > 0 && (\r\n               <Section title=\"Popular Movies\">\r\n                  {data.popular.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              type=\"movie\"\r\n                              rating={x.vote_average}\r\n                              id={x.id}\r\n                              imageUrl={x.poster_path}\r\n                              title={x.original_title}\r\n                              year={x.release_date.substring(0, 4)}\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.error && <Message text={data.error} />}\r\n         </PosterWrap>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Movie;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport Helmet from 'react-helmet';\r\nimport { tvApi } from 'api';\r\n\r\nimport Section from 'components/section';\r\nimport Poster from 'components/poster';\r\nimport PosterWrap from 'components/poster-wrap';\r\nimport Message from 'components/message';\r\n\r\ntype DataType = {\r\n   topRated: any[];\r\n   popular: any[];\r\n   airingToday: any[];\r\n   error: string;\r\n};\r\n\r\nconst Tv: React.FC = () => {\r\n   const [data, setData] = useState<DataType>({\r\n      topRated: [],\r\n      popular: [],\r\n      airingToday: [],\r\n      error: '',\r\n   });\r\n   const TvFunction = async () => {\r\n      try {\r\n         const topRated = await tvApi.topRated();\r\n         const popular = await tvApi.popular();\r\n         const airingToday = await tvApi.airingToday();\r\n         setData({\r\n            ...data,\r\n            topRated: topRated.data.results,\r\n            popular: popular.data.results,\r\n            airingToday: airingToday.data.results,\r\n         });\r\n      } catch (e) {\r\n         console.log({ e });\r\n         setData({ ...data, error: \"Can't find Tvs information.\" });\r\n      }\r\n   };\r\n\r\n   useEffect(() => {\r\n      TvFunction();\r\n   }, []);\r\n   return (\r\n      <>\r\n         <Helmet>\r\n            <title>Movies | Dongflix</title>\r\n         </Helmet>\r\n         <PosterWrap>\r\n            {/*  */}\r\n            {data.topRated && data.topRated.length > 0 && (\r\n               <Section title=\"Top Rated\">\r\n                  {data.topRated.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              id={x.id}\r\n                              title={x.original_name}\r\n                              imageUrl={x.poster_path}\r\n                              rating={x.vote_average}\r\n                              year={x.first_air_date.substring(0, 4)}\r\n                              type=\"tv\"\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.popular && data.popular.length > 0 && (\r\n               <Section title=\"Popular TV\">\r\n                  {data.popular.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              id={x.id}\r\n                              title={x.original_name}\r\n                              imageUrl={x.poster_path}\r\n                              rating={x.vote_average}\r\n                              year={x.first_air_date.substring(0, 4)}\r\n                              type=\"tv\"\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.airingToday && data.airingToday.length > 0 && (\r\n               <Section title=\"Airing Today TV\">\r\n                  {data.airingToday.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              id={x.id}\r\n                              title={x.original_name}\r\n                              imageUrl={x.poster_path}\r\n                              rating={x.vote_average}\r\n                              year={x.first_air_date.substring(0, 4)}\r\n                              type=\"tv\"\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.error && <Message text={data.error} />}\r\n         </PosterWrap>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Tv;\r\n","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n   padding: 40px 0px;\r\n   & .search_form {\r\n      width: 100%;\r\n      & input {\r\n         width: 100%;\r\n         padding: 0 8px;\r\n         font-size: 28px;\r\n         color: rgba(255, 255, 255, 1);\r\n         background: none;\r\n         border: none;\r\n         outline: none;\r\n         &::placeholder {\r\n            color: rgba(255, 255, 255, 0.6);\r\n         }\r\n      }\r\n   }\r\n`;\r\nexport default Wrapper;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { Grid } from '@material-ui/core';\r\nimport { movieApi, tvApi } from 'api';\r\n\r\nimport Wrapper from './styles';\r\nimport Section from 'components/section';\r\nimport Poster from 'components/poster';\r\nimport PosterWrap from 'components/poster-wrap';\r\nimport Message from 'components/message';\r\n\r\ntype DataType = {\r\n   movieResult: any[] | null;\r\n   tvResult: any[] | null;\r\n   searchTerm: string;\r\n   error: string;\r\n};\r\n\r\nconst Search: React.FC = () => {\r\n   const [data, setData] = useState<DataType>({\r\n      movieResult: null,\r\n      tvResult: null,\r\n      searchTerm: '',\r\n      error: '',\r\n   });\r\n\r\n   const [currentSearchTerm, setCurrentSearchTerm] = useState<string>('');\r\n\r\n   const searchFunction = async (term: string) => {\r\n      let searchTerm: string | undefined = \"\";\r\n      // 새로고침 시, 전에 검색한 기록이 있으면 반영\r\n      if (term !== \"\") {\r\n         searchTerm = term;\r\n         // 화면에 표시하는 데이터는 디코딩 문자열\r\n         setCurrentSearchTerm(decodeURIComponent(JSON.parse(searchTerm)));\r\n      } else {\r\n         // 통신하는 데이터는 인코딩 문자열\r\n         searchTerm = encodeURIComponent(currentSearchTerm);\r\n         // 로컬 저장소에 json형태로 set\r\n         localStorage.setItem('searchTerm', JSON.stringify(searchTerm));\r\n      }\r\n      try {\r\n         if (searchTerm!==\"\") {\r\n            let movieResults = await movieApi.search(searchTerm);\r\n            let tvResults = await tvApi.search(searchTerm);\r\n            setData({\r\n               ...data,\r\n               movieResult: [...movieResults.data.results],\r\n               tvResult: [...tvResults.data.results],\r\n               searchTerm: searchTerm,\r\n               error: `Nothing found : ${decodeURIComponent(searchTerm)}`,\r\n            });\r\n         } else  {\r\n            setData({\r\n               movieResult: [],\r\n               tvResult: [],\r\n               searchTerm: '',\r\n               error: '',\r\n            });\r\n         }\r\n      } catch (e) {\r\n         setData({ ...data, error: \"Can't find results.\" });\r\n      }\r\n   };\r\n\r\n   useEffect(() => {\r\n      let currentSearchTerm = localStorage.getItem('searchTerm');\r\n      // 만약, 전에 검색했던 검색어가 없거나 빈게 아니면 히스토리를 가져와라\r\n      if (currentSearchTerm&&currentSearchTerm!==`\"\"`) {\r\n         searchFunction(currentSearchTerm);\r\n      }\r\n   }, []);\r\n\r\n   return (\r\n      <Wrapper>\r\n         <Helmet>\r\n            <title>Search | Dongflix</title>\r\n         </Helmet>\r\n         {/*  */}\r\n         <Grid className=\"search_form\">\r\n            <input\r\n               type=\"text\"\r\n               value={currentSearchTerm}\r\n               placeholder=\"Search Movies or TV Shows...\"\r\n               onChange={(e) => {\r\n                  setCurrentSearchTerm(e.target.value);\r\n               }}\r\n               onKeyUp={(e) => e.key === 'Enter' && searchFunction(\"\")}\r\n            />\r\n         </Grid>\r\n         {/*  */}\r\n         <PosterWrap>\r\n            {data.movieResult && data.movieResult.length > 0 && (\r\n               <Section title=\"Movie Results\">\r\n                  {data.movieResult.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              id={x.id}\r\n                              title={x.original_title}\r\n                              imageUrl={x.poster_path}\r\n                              rating={x.vote_average}\r\n                              year={x && x.release_date && x.release_date.substring(0, 4) && x.release_date.substring(0, 4)}\r\n                              type=\"movie\"\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.tvResult && data.tvResult.length > 0 && (\r\n               <Section title=\"TV Results\">\r\n                  {data.tvResult.map((x, index) => {\r\n                     return (\r\n                        <Grid item className=\"poster\" key={x.id}>\r\n                           <Poster\r\n                              id={x.id}\r\n                              title={x.original_name}\r\n                              imageUrl={x.poster_path}\r\n                              rating={x.vote_average}\r\n                              year={\r\n                                 x && x.first_air_date && x.first_air_date.substring(0, 4) ? x.first_air_date.substring(0, 4) : 'Not Found'\r\n                              }\r\n                              type=\"tv\"\r\n                           />\r\n                        </Grid>\r\n                     );\r\n                  })}\r\n               </Section>\r\n            )}\r\n            {/*  */}\r\n            {data.movieResult && data.tvResult && data.movieResult.length === 0 && data.tvResult.length === 0 && data.searchTerm !== '' && (\r\n               <Message text={data.error} />\r\n            )}\r\n            {/*  */}\r\n         </PosterWrap>\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default Search;\r\n","import styled from 'styled-components';\r\n\r\ntype BackdropType = {\r\n   bgUrl: string;\r\n};\r\n\r\nexport const Backdrop = styled.div<BackdropType>`\r\n   width: 100%;\r\n   height: 100%;\r\n   filter: blur(3px);\r\n   opacity: 0.5;\r\n   background: url(${(props) => `${props.bgUrl}`}) center center;\r\n   background-size: cover;\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n   position: fixed;\r\n   left: 0;\r\n   bottom: 0;\r\n   z-index: 1500;\r\n   width: 100%;\r\n   height: calc(100vh - 61px);\r\n   & .detail {\r\n      position: fixed;\r\n      left: 0;\r\n      top: 59px;\r\n      width: 100%;\r\n      height: 100%;\r\n      & .poster {\r\n         position: absolute;\r\n         left: 0;\r\n         top: 0;\r\n         z-index: 1;\r\n         max-width: 600px;\r\n         width: 100%;\r\n         height: 100%;\r\n         object-fit: cover;\r\n         -webkit-mask-image: -webkit-gradient(\r\n            linear,\r\n            right top,\r\n            left top,\r\n            color-stop(1, rgba(0, 0, 0, 1)),\r\n            color-stop(0.5, rgba(0, 0, 0, 1)),\r\n            color-stop(0, rgba(0, 0, 0, 0))\r\n         );\r\n      }\r\n      & .text {\r\n         position: absolute;\r\n         left: 36%;\r\n         top: 0;\r\n         height: 100%;\r\n         z-index: 2000;\r\n         width: calc(67% - 40px);\r\n         & > div {\r\n            height: 100%;\r\n            & > div {\r\n               & h2 {\r\n                  line-height: 48px;\r\n                  font-size: 32px;\r\n                  font-weight: bold;\r\n                  color: #fff;\r\n                  text-shadow: 2px 2px 2px rgba(0, 0, 0, 1);\r\n               }\r\n               & h3 {\r\n                  padding: 8px 0 32px;\r\n                  & > span {\r\n                     display: inline-block;\r\n                     margin-right: 24px;\r\n                     color: #fff;\r\n                     text-shadow: 2px 2px 2px rgba(0, 0, 0, 1);\r\n                     &.genres {\r\n                        & em {\r\n                           display: inline-block;\r\n                           margin-right: 4px;\r\n                           &.last {\r\n                              margin-right: 0;\r\n                           }\r\n                        }\r\n                     }\r\n                     &:last-child {\r\n                        margin-right: 0;\r\n                     }\r\n                     &.rating {\r\n                        & .star {\r\n                           position: relative;\r\n                           display: block;\r\n                           width: 80px;\r\n                           height: 16px;\r\n                           margin: 0 auto;\r\n                           background: url('/dongflix/images/star.png') no-repeat left bottom;\r\n                           background-size: 80px;\r\n                        }\r\n                        & .star_cover {\r\n                           position: absolute;\r\n                           left: 0px;\r\n                           top: 0;\r\n                           display: block;\r\n                           width: 0;\r\n                           height: 16px;\r\n                           background: url('/dongflix/images/star_cover_w.png') no-repeat left bottom;\r\n                           background-size: 80px;\r\n                        }\r\n                     }\r\n                  }\r\n               }\r\n               & .review {\r\n                  display: block;\r\n                  width: 150px;\r\n                  height: 40px;\r\n                  line-height: 36px;\r\n                  color: #fff;\r\n                  font-size: 12px;\r\n                  text-align: center;\r\n                  text-shadow: 2px 2px 2px rgba(0, 0, 0, 1);\r\n                  border: 2px solid #fff;\r\n                  border-radius: 4px;\r\n                  background: rgba(255, 255, 255, 0.3);\r\n                  cursor: pointer;\r\n                  &:hover {\r\n                     background: rgba(255, 255, 255, 0.5);\r\n                  }\r\n               }\r\n               & p {\r\n                  width: 635px;\r\n                  line-height: 24px;\r\n                  margin-top: 24px;\r\n                  color: rgba(255, 255, 255, 0.8);\r\n                  text-shadow: 2px 2px 2px rgba(0, 0, 0, 1);\r\n               }\r\n               & .youtube {\r\n                  margin-top: 24px;\r\n                  & button {\r\n                     width: 32px;\r\n                     height: 23px;\r\n                     background: url('/dongflix/images/icon/youtube_icon.png') no-repeat;\r\n                     background-size: 32px;\r\n                     border: none;\r\n                     outline: none;\r\n                     cursor: pointer;\r\n                  }\r\n                  & .iframe_wrap {\r\n                     width: 100%;\r\n                     margin-top: 32px;\r\n                     & iframe {\r\n                        width: 100%;\r\n                        height: 100%;\r\n                        max-height: 0px;\r\n                        opacity: 0;\r\n                     }\r\n                  }\r\n                  &.on {\r\n                     & .iframe_wrap {\r\n                        height: 320px;\r\n                        & iframe {\r\n                           max-height: 320px;\r\n                           opacity: 1;\r\n                        }\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n   @media (max-width: 600px) {\r\n      & .detail {\r\n         & .poster {\r\n            -webkit-mask-image: none !important;\r\n         }\r\n         & .text {\r\n            left: 0;\r\n            width: 100%;\r\n            padding: 0 16px;\r\n            text-align: center;\r\n            & > div {\r\n               & > div {\r\n                  width: 100%;\r\n                  & .review {\r\n                     margin: 0 auto;\r\n                  }\r\n                  & > p {\r\n                     width: 100%;\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n`;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { Grid } from '@material-ui/core';\r\nimport { movieApi, tvApi } from 'api';\r\nimport Message from 'components/message';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n\r\nimport { Backdrop, Wrapper } from './styles';\r\n\r\ntype DataType = {\r\n   result: any;\r\n   error: string;\r\n};\r\n\r\nconst Detail = () => {\r\n   const history = useHistory();\r\n   const { id } = useParams<any>();\r\n\r\n   let parseIntId = parseInt(id);\r\n\r\n   const [data, setData] = useState<DataType>({\r\n      result: {},\r\n      error: '',\r\n   });\r\n\r\n   let dataType = history.location.pathname.split('/')[1];\r\n\r\n   const [youtubeSw, setYoutubeSw] = useState<boolean>(false);\r\n\r\n   const DetailDataFunction = async () => {\r\n      let result = {};\r\n      try {\r\n         if (dataType === 'movie') {\r\n            const data = await movieApi.movieDetail(parseIntId);\r\n            result = data.data;\r\n         } else {\r\n            const data = await tvApi.tvDetail(parseIntId);\r\n            result = data.data;\r\n         }\r\n      } catch (e) {\r\n         setData({ ...data, error: \"Can't find anything.\" });\r\n      }\r\n      setData({\r\n         ...data,\r\n         result,\r\n      });\r\n   };\r\n\r\n   useEffect(() => {\r\n      // id 없을 때 메인페이지로 유도\r\n      if (isNaN(parseIntId)) {\r\n         history.push('/');\r\n      } else {\r\n         DetailDataFunction();\r\n      }\r\n   }, []);\r\n\r\n   return (\r\n      <>\r\n         <Helmet>\r\n            <title>Detail | Dongflix</title>\r\n         </Helmet>\r\n         {/*  */}\r\n         {data.error !== '' ? (\r\n            <Message text={data.error} />\r\n         ) : (\r\n            <Wrapper>\r\n               <Backdrop\r\n                  bgUrl={\r\n                     data.result.backdrop_path\r\n                        ? `https://image.tmdb.org/t/p/original${data.result.backdrop_path}`\r\n                        : '/dongflix/images/notVideo.jpg'\r\n                  }\r\n               />\r\n               <Grid container className=\"detail\">\r\n                  <img\r\n                     src={\r\n                        data.result.poster_path\r\n                           ? `https://image.tmdb.org/t/p/original${data.result.poster_path}`\r\n                           : '/dongflix/images/notVideo.jpg'\r\n                     }\r\n                     alt=\"poster\"\r\n                     className=\"poster\"\r\n                  />\r\n                  <Grid className=\"text\">\r\n                     <Grid container alignItems=\"center\">\r\n                        <Grid item>\r\n                           <h2>\r\n                              {data.result.original_title}\r\n                              {data.result.original_name}\r\n                           </h2>\r\n                           <h3>\r\n                              {data.result?.genres && data.result?.genres.length > 0 ? (\r\n                                 <>\r\n                                    <span className=\"genres\">\r\n                                       {data.result.genres.map((x: any, index: number): any => {\r\n                                          return (\r\n                                             <em key={index} className={index + 1 === data.result.genres.length ? 'last' : ''}>\r\n                                                {x.name}\r\n                                                &nbsp;\r\n                                                {index + 1 !== data.result.genres.length && '/'}\r\n                                             </em>\r\n                                          );\r\n                                       })}\r\n                                    </span>\r\n                                 </>\r\n                              ) : (\r\n                                 'Not Found'\r\n                              )}\r\n\r\n                              <span>\r\n                                 {data.result.release_date?.substring(0, 4)}\r\n                                 {data.result.first_air_date?.substring(0, 4)}\r\n                              </span>\r\n                              <span>\r\n                                 {data.result?.runtime}\r\n                                 {data.result?.episode_run_time}\r\n                                 &nbsp;min\r\n                              </span>\r\n                              <span className=\"rating\">\r\n                                 {data.result?.vote_average && (\r\n                                    <span className=\"star\">\r\n                                       <span className=\"star_cover\" style={{ width: `${data.result?.vote_average * 10}%` }}></span>\r\n                                    </span>\r\n                                 )}\r\n                              </span>\r\n                           </h3>\r\n                           <a\r\n                              href={data.result?.homepage ? `${data.result.homepage}` : '/'}\r\n                              target=\"_blank\"\r\n                              rel=\"noopener noreferrer\"\r\n                              className=\"review\"\r\n                           >\r\n                              READ REVIEW\r\n                           </a>\r\n                           <p>{data.result?.overview}</p>\r\n                           {data.result?.videos && (\r\n                              <Grid className={`youtube ${youtubeSw && 'on'}`}>\r\n                                 <button\r\n                                    type=\"button\"\r\n                                    onClick={() => {\r\n                                       setYoutubeSw(!youtubeSw);\r\n                                    }}\r\n                                 ></button>\r\n                                 <Grid className=\"iframe_wrap\">\r\n                                    <iframe\r\n                                       title=\"youtube\"\r\n                                       src={\r\n                                          data.result.videos.results[0]?.key &&\r\n                                          `https://www.youtube.com/embed/${data.result.videos.results[0].key}`\r\n                                       }\r\n                                       allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n                                    ></iframe>\r\n                                 </Grid>\r\n                              </Grid>\r\n                           )}\r\n                        </Grid>\r\n                     </Grid>\r\n                  </Grid>\r\n               </Grid>\r\n            </Wrapper>\r\n         )}\r\n         {/*  */}\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Detail;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route, Redirect, Switch } from \"react-router-dom\";\r\n\r\n// layout\r\nimport Layout from \"./layout\";\r\n\r\n// pages\r\nimport Movie from \"pages/movie\";\r\nimport Tv from \"pages/tv\";\r\nimport Search from \"pages/search\";\r\nimport Detail from \"pages/detail\";\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <BrowserRouter basename=\"/dongflix\">\r\n      <Layout>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Movie} />\r\n          <Route path=\"/movie\" exact component={Movie} />\r\n          <Route path=\"/tv\" exact component={Tv} />\r\n          <Route path=\"/search\" component={Search} />\r\n          <Route path=\"/movie/detail/:id\" component={Detail} />\r\n          <Route path=\"/tv/detail/:id\" component={Detail} />\r\n\r\n          <Redirect from=\"*\" to=\"/\" />\r\n        </Switch>\r\n      </Layout>\r\n    </BrowserRouter>\r\n  );\r\n};\r\nexport default Routes;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from 'redux/redux';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { theme } from 'theme/theme';\r\nimport LoadingBar from 'components/loading-bar';\r\n\r\nimport Routes from './Routes';\r\n\r\nconst App: React.FC = () => {\r\n   const reducer = useSelector((state: RootState) => state.reducer);\r\n   return (\r\n      <ThemeProvider theme={theme}>\r\n         {reducer.isLoading && <LoadingBar />}\r\n         <Routes />\r\n      </ThemeProvider>\r\n   );\r\n};\r\n\r\nexport default App;\r\n","// IE11 보기 위함\r\nimport 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from 'redux/redux';\r\n\r\n// css\r\nimport './css/reset.css';\r\nimport './css/global.css';\r\n\r\nimport App from 'App';\r\n\r\nReactDOM.render(\r\n   <Provider store={store}>\r\n      <App />\r\n   </Provider>,\r\n   document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}